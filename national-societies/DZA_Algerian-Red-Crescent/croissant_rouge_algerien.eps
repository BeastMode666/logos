%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: croissant_rouge_algerien.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: SC%%CreationDate: 4/24/06%%BoundingBox: 0 0 283 283%%HiResBoundingBox: 0 0 282.4844 282.4825%%CropBox: 0 0 282.4844 282.4825%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 16006 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD35FFCACAFD04C3BDC3BDC3BDC3BDC3BDC3C3C3BDC3C3CACAFD64%FFA1C3BDC39BC4C3CACAFD0DFFCAFFCACAC3C39BC3C3CACAFD5BFFCAC3C3%BDC3C4FD1BFFCACAC3C3BDC4CAFD55FFCAA1C39BC4A8FD22FFCBA1C39AC3%A8FD50FFC4C3BDCAFD2AFFC3C3BDCAFD4BFFCAC39AC3CAFD2EFFCBC3BDA1%FD48FFC3C3C3FD34FFCABCC3FD43FFCAC39AC3CBFD37FFA1BDA1FD40FFC3%C3C3FD3CFFCABCCAFD3DFF9AC3CAFD3FFF9ABDCAFD39FFC3BCCAFD42FFCA%BDC3FD36FFA8BDA1FD46FFC39ACAFD33FFC3BDCAFD48FFCABCCAFD31FFBD%BDCBFD4BFF9AC3FD2FFFBCC4FD4EFFC3BDFD2CFFCB94CAFD1EFFAFFFA8AF%84A984A984A984A984A984A9A8AFA8FD1FFFA1BCCAFD29FFCBBCFD1DFFAF%AFA9AFA9AFAFFFAFFD07FFAFFFFFFFA9AFA9AFA9FD1DFFCABDCAFD27FFCA%94FD1BFFA8AF84A9A8FD15FFAFAF84A984AFA9FD19FFCABCC4FD25FFCABC%FD19FFA9AFA9AFAFFD1DFFA9A985FD1AFFBDCAFD23FFCA9AFD18FFAF84A9%A8FD0BFFCAFFCACAA8CACACAA8FFCAFD0CFFAF84A9A8FD18FFBCA1FD21FF%CABCFD17FFA9AFA9FD0BFFC4C3BDFD0EC3CACAFD0AFFAF85FD18FFBDCAFD%20FF9AFD16FFAF84A9FD08FFCACABDC39BC4CACBCAFD0BFFCACAC3C39AC3%C3CBFD08FF84A9A9FD15FFCABCCAFD1EFFBCFD16FFA985FD07FFCACABDC3%C3FD09FFCACAC3CAC4CACAFD07FFCACABDC3C3FD08FFAF85FD15FFCABDFD%1DFF9ACAFD14FFA885A9FD06FFCA9BBDA1FD05FFCAC39AB68DB08CB08CFC%8CB08CB08CB593BCA1CAFD04FFCAC39AC3CAFD07FF84A9FD14FFA1BCFD1B%FFC3C4FD14FF85AFFD06FFCAC3BDCAFD04FFC3BDB5B08CB0FCB08CB0FCB0%8CB0FCB08CB0FCB08CB0FCB5BCCAFD04FFCAC3BDFD07FFA9AFFD14FFC3C3%FD19FFA1C3FD14FF84AFFD06FFBDBDC4FFFFFFA1BC8CFC8CB08CB08CB08C%B08CB08CB08CB08CB08CB08CB08CB08CFC8CB59ACAFFFFFFCA9AC3CAFD05%FFA885A9FD13FFBCCAFD17FFCABDFD13FFAF84FD06FFC4BCCAFFFFFFC4B5%B08CB0FCB08CB0FCB08CB0FCB08CB0FCB08CB0FCB08CB0FCB08CB0FCB08C%B08CB6C3FFFFFFC3BDC3FD06FFA9A9FD13FFBCFD17FFBDCAFD12FFAF84FD%05FFA8BD9BFFFFFFA1B58CFC8CB08CB08CB08CB08CB08CB08CB08CB08CB0%8CB08CB08CB08CB08CB08CB08CB08CFC8DC3FFFFCAC39ACAFD05FFA984FD%12FFCA9AFD15FFC4C3FD12FFAFA9FD05FFC3BDCAFFFFCAB5FC8CB0FCB08C%B0FCB08CB0FCB08CB0FCB08CB0FCB08CB0FCB08CB0FCB08CB0FCB08CB0FC%B08CB0FCB6CAFFFFCABCCAFD05FFAFA9FD12FFC3C3FD13FFCA9AFD12FFA9%84FD05FFBDBDCBFFFFBC8CFC8CB08CB08CB08CB08CB08CB08CB08CB08CB0%8CB08CB08CB08CB08CB08CFC8CB08CB08CB08CB08CB08CFC9AFFFFFF9AC3%FD05FFA984FD12FFBCCAFD12FFBCCAFD11FFAFA9FD05FFBCC4FFFFCAB58C%B08CB0FCB08CB0FCB08CB0FCB08CB0FCB08CB0FCB08CB08CFC8CB0FCB08D%B6B5B58CB5FCB08CB08CB08CB0FCFC8DCAFFFFC3BDFD05FFAF85FD11FFCA%C3FD11FFA1C3FD11FFA984FD05FF9ACAFFFF9BFC8CB08CB08CB08CB08CB0%8CB08CB08CB08CB08CB08CB08CFC8CB69AC3A1CACAFFCAFFCAFFA8CAA1BD%93B08CFC8CB08CFC8CC3FFFFA1BCCAFD04FFA984FD11FF9ACAFD10FFBDFD%11FFAF85FD05FFBCCAFFFFBCFC8CB0FCB08CB0FCB08CB0FCB08CB0FCB08C%B0FCB08CB0B0BCC3FD12FFCABCB5FCB08CB0FCBDFFFFCABDCAFD04FFAFA9%FD11FFBCFD0FFFC3A1FD11FF84FD05FF94CAFFFF93FC8CB08CB08CB08CB0%8CB08CB08CB08CB08CB08CFC8CB59BFD17FFCACA93FC8CB08CB6FFFFCABC%CAFD04FFA9A9FD10FFC3A1FD0EFFBCFD11FF84FD05FFBCCAFFFFB5FC8CB0%FCB08CB0FCB08CB0FCB08CB0FCB08CB08CFC93C4FD1CFFCABC8CB08CB6FF%FFCABCFD05FFA9FD11FFBDCAFD0CFF9BC4FD10FF84AFFD04FF9ACAFFFF93%FC8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB09BFD20FFCA8DFC8CB6%CAFFC3BCFD04FFA8A9FD10FFC3C3FD0CFFC3FD10FFA9AFFD04FFBDCAFFFF%B5B0FCB08CB0FCB08CB0FCB08CB0FCB08CB0FCB08CBCCAFD23FFBDB08CBC%FFFFC3C3FD04FFA9AFFD10FFBCFD0BFFC3A1FD0FFFA985FD04FFC3BDFFFF%9AFC8CB08CB08CB08CB08CB08CB08CB08CB08CFC8CC3FD26FFCAB58CBCFF%FF9ACAFD04FF84FD10FFC4A1FD0AFFBCFD10FFA9A9FFFFFFCABDFFFFBDB0%FCB08CB0FCB08CB0FCB08CB0FCB08CB0FCFC8DCAFD29FFBC8CC3FFFFBCFD%05FF85FD10FFBDFD09FFA1C3FD0FFFAF84FD04FFBCA2FFC4FC8CB08CB08C%B08CB08CB08CB08CB08CB08CFC8DCAFD2BFFBC8CCAFFCA9AFD04FFA9A9FD%0FFF9BCAFD08FFC3CAFD0FFF85FD04FFC4C3FFFFB58CB0FCB08CB0FCB08C%B0FCB08CB0FCB08CB0B5FD2EFFBDB0FFFFC3C3FD04FFA9FD10FFBDFD07FF%CA9AFD0FFFA8AFFD04FF9AFFFFBD8CB08CB08CB08CB08CB08CB08CB08CB0%8CFC8DFD30FFBC94FFFFBCCAFFFFFFA9AFFD0FFFC3CAFD06FFC3CAFD0FFF%A9FD04FFBDCAFFCA8CB0FCB08CB0FCB08CB0FCB08CB0FCB08CB0B0FD32FF%BCC3FFC3C3FD04FF85FD0FFFC3C3FD06FFC3CAFD0EFFAFA8FFFFFFCABDFF%FF93FC8CB08CB08CB08CB08CB08CB08CB08CFC8CCAFD32FFA8BCCAFF9ACA%FFFFFFAFA8FD0FFF9AFD06FFC3FD0FFF85FD04FFC3CAFFC3FC8CB0FCB08C%B0FCB08CB0FCB08CB0FCB08CC3FD34FFCAC4FFCAC3FD04FFAFFD0FFFC3CA%FD04FFA1CAFD0EFFA8AFFFFFFFCBBCFFFFB58CB08CB08CB08CB08CB08CB0%8CB08CB08CB6FD36FFC3FFFFC3CAFFFFFF84AFFD0EFFC3C3FD04FFC3CAFD%0EFFAFA9FFFFFFBDCAFFC48CB0FCB08CB0FCB08CB0FCB08CB0FCB08CB0CA%FD39FFC4C3FD04FFA9FD0FFFBDFD04FF9AFD0FFF84FFFFFFCABDFFFF93FC%8CB08CB08CB08CB08CB08CB08CB08CFC9AFD3BFF9AFD04FFA9AFFD0EFFC3%CAFFFFCAC3FD0EFFAFAFFFFFFFCAC3FFCAB08CB0FCB08CB0FCB08CB0FCB0%8CB0FCB08DFD3CFFCAC3FFFFFFA9FD0FFFC3CAFFFFC3C4FD0EFFAFA9FFFF%FFBCCAFFBC8CB08CB08CB08CB08CB08CB08CB08CB08CC3FD3CFFCAC3FD04%FF84FD0EFFCAC3FFFFBDFD0FFF85FFFFFFCAC3FFFF8DB0FCB08CB0FCB08C%B0FCB08CB0FCB08CB5FD3EFFBDFD04FFAFFD0EFFCAC3FFCAC3CAFD0DFFA9%A9FFFFFFC4A1FFA1FC8CB08CB08CB08CB08CB08CB08CB08CFC9AFD3EFFC3%A1FFFFFF84FD0FFF9AFFFFBDFD0EFFAFA9FFFFFFC3FFFFBD8CB0FCB08CB0%FCB08CB0FCB08CB0FCB08CFD3FFFCAC3FD04FFA9FD0EFFC3CAC4C3FD0EFF%84FD04FFC3FFFF8DFC8CB08CB08CB08CB08CB08CB08CB08CB6FD40FF9AFF%FFFFA9AFFD0EFFA1CACACAFD0EFFAFFD04FFC3FFCAB0FCB08CB0FCB08CB0%FCB08CB0FCB08CFCBDFD40FFC3CAFFFFFF85FD0EFFCAC39BCAFD0EFF84FF%FFFFA1C4FFC38CB08CB08CB08CB08CB08CB08CB08CFC8CCAFD40FFA1CAFF%FFFFA9A8FD0DFFCAC3C3CAFD0DFFAFAFFFFFFFC4CAFFBCB0FCB08CB0FCB0%8CB0FCB08CB0FCB08CB5FD41FFCAC3FFFFFFA9FD0FFFBD9AFD0EFFAFA8FF%FFFF9AFFFFB68CB08CB08CB08CB08CB08CB08CB08CFC93FD41FFCAC3FFFF%FFAFA8FD0DFFCAC3C3FD0EFFA9FD04FFC3FFFFB5B08CB0FCB08CB0FCB08C%B0FCB08CB08CC3FD42FFC3FFFFFFAFAFFD0EFFBD9AFD0EFFA9A9FFFFFF9B%FFCAB08CB08CB08CB08CB08CB08CB08CB08CFCA1FD41FFCAC3CAFFFFFF84%FD0EFFC3C3FD0EFFA9FFFFFFCAC3FFFFB0B08CB0FCB08CB0FCB08CB0FCB0%8CB0FCCAFD42FFC3FD04FFAFFD0EFFBDBCFD0EFFAFFFFFFFCBBDFFCAB08C%B08CB08CB08CB08CB08CB08CB08CB0CAFD42FFC3CAFFFFFFA9FD0EFFC3C3%FD0EFFA9FFFFFFCAC3FFCA8CB0FCB08CB0FCB08CB0FCB08CB0FCB08CFD43%FFC3FD04FFAFFD0EFFBD9AFD0EFFA9A8FFFFCA9BFFC3FC8CB08CB08CB08C%B08CB08CB08CB08CB0A8FD42FFC3A8FFFFFF84FD0EFFC3C3FD0EFFA9FFFF%FFCAC3FFCA8CB0FCB08CB0FCB08CB0FCB08CB0FCB08CFD43FFC3FD04FFAF%FD0EFFBD9AFD0EFFA9A9FFFFCA9BFFC3FC8CB08CB08CB08CB08CB08CB08C%B08CB0CAFD42FFC3CAFFFFFF84FD0EFFC3C3FD0EFFA9FFFFFFCAC3FFCAFC%B08CB0FCB08CB0FCB08CB0FCB08CB0FCCAFD42FFC3FD04FFAFFD0EFFBD9A%FD0EFFA9A9FFFFFF9BFFA8B08CB08CB08CB08CB08CB08CB08CB08CFCC3FD%42FFC3CAFFFFFF84FD0EFFC3C3FD0EFFA9FD04FFC3FFFFB0B08CB0FCB08C%B0FCB08CB0FCB08CB0FCC3FD42FFC3FD04FFAFFD0EFFC3BDFD0EFFAFA9FF%FFFFBDFFFFB58CB08CB08CB08CB08CB08CB08CB08CFC9AFD41FFCAC3FD04%FF84FD0EFFC3C3FD0EFFA9FD04FFC3CAFF93B0FCB08CB0FCB08CB0FCB08C%B0FCB08CBCFD42FFBDFFFFFFA9AFFFFFCAFD0BFFBD9AFD07FFCAC393938D%9ACAAF84FFFFFF9BCAFFBC8CB08CB08CB08CB08CB08CB08CB08CFC8CFD41%FFC4C3FFFFFFA9A8FFA194A1FD09FFCAC3C3CAFD05FFCAB68C939AC39493%A1AFFFFFFFCAC3FFC3B0FCB08CB0FCB08CB0FCB08CB0FCB08CB0CAFD40FF%CAC3FFFFFFA9FFFFCA9AC49BC3A1CACAFD04FFCBC3A1CAFD05FF948CC4FD%04FFCA947DFFFFFFCAC3FFCA8CB08CB08CB08CB08CB08CB08CB08CB08CC3%FD40FFBDCAFFFFFFA9A9FFCAFD04FF9A8CBCCAFFFFFFC3C3CAC3FD04FFCA%8DCAFD06FFCA9AFD04FFBDFFFFB58CB0FCB08CB0FCB08CB0FCB08CB0FCB0%93FD40FFC3FD04FFA9FD05FFCABC93CAFD05FFCACACAC3FD04FF9ABDFD08%FF9ACAFFFFFFC3A8FF94FC8CB08CB08CB08CB08CB08CB08CB08CFCA8FD3E%FFCA9AFFFFFFA8AFFD04FF9A939AFD07FF9ACAFFC3FD04FFC3CAFD08FFCA%A1FFFFFFC3CAFFCA8CB0FCB08CB0FCB08CB0FCB08CB0FCB08CC3FD3EFFC3%CAFFFFFFAFAFFFFFC393C3FD09FFC3FFFFC3CAFFFFFF9BCAFD08FFA19BFF%FFFFCB9AFFCAB08CB08CB08CB08CB08CB08CB08CB08CFC8CFD3EFFC3CAFF%FFFF84FFFFC38CBCA1CAA8FFCACAFFFFFFCB9AFFFFC3CAFFFFFFC4A1FD08%FFB670FD04FFC3CAFFBCFC8CB0FCB08CB0FCB08CB0FCB08CB0FCFCC3FD3D%FFBDFFFFFFAFAFFFFFA1CAFFCAC3C39ABCCAFFFFFFCAC3FFFFCAA1FFFFFF%CA9AFD07FFC394A8A9FFFFFFC3C3FFCA8CB08CB08CB08CB08CB08CB08CB0%8CB08CB5CAFD3BFFA1C4FFFFFFAFA9FFA89AA8FD05FF9AFD04FFC3C3FFFF%CBC3FD04FF9ABCC4FD04FFCAA1FFFFAFFD04FFBCFFFFB68CB0FCB08CB0FC%B08CB0FCB08CB0FCB08CC3FD3BFFC3FD04FFA9FFFFCACAFFA1C3FFFF9AFD%05FFBDFD04FFBCFD05FFA1C3FFFFA8BD8D9AFFFF84FD04FFC3A1FFC3FC8C%B08CB08CB08CB08CB08CB08CB08CFC8CCBFD39FFCA9BFFFFFFA9A9FFFF9A%FFFFCA94FFFFC3A1FFFFFFCAC3FD04FFC4C3FD06FFC493939ACBC3CAFFFF%A9FFFFFFCAC3FFFFB5B08CB0FCB08CB0FCB08CB0FCB08CB0FCFC93FD36FF%CACAFFBCFD04FFAFA9FFCA9393CA9AFFFFFFA1FD04FFCAC3FD04FFA8C3FD%04FF9A9393C39BFFFFC49AFFFFA9AFFFFFFF9ACAFFC38CB08CB08CB08CB0%8CB08CB08CB08CB08CFC9AFD34FFCAA1FFA2C3FD04FF84FFFFCAA1C39393%94C4A1C3FD04FF9BCAFD05FFBDFD04FFCA9AFFFF93A1CA93C3FFFFA9AFFD%04FFBCFFFFB68CB0FCB08CB0FCB08CB0FCB08CB0FCB08CB0CAFD33FFBCFF%FFC3CAFFFFFFA9AFFFFFC3FFFFFFCAC393B5CAFD04FFC3FD06FFC3C3FD06%FFBC94C393C3FD04FF84FD04FFC3A1FFC4FC8CB08CB08CB08CB08CB08CB0%8CB08CB08CB0CAFD31FF93C4FFCA9AFD04FFA9FFFF9B939ACAFD04FF9AFD%04FFCAC3FD06FFCAC3FD05FFC38DFFFFFFA2CACAFFFFAFA9FD04FFBDFFFF%BCFC8CB0FCB08CB0FCB08CB0FCB08CB0FCB08CB5FD30FFB6BCFFFFBCFD04%FFAFA9FFFFCACABC93BCCAFD07FFBDFD08FF9ACBFD04FF93C3FFBD8C949A%BCA1FFFFA9AFFFFFFFA1C3FFFF8DFC8CB08CB08CB08CB08CB08CB08CB08C%B08CB5CAFD2DFF94B0CAFF9BC3FD04FF84FD07FF9A9393BDCAFFFFFFCABD%FD08FFCAC3FD04FFC3FFC38CCAFFFFFFC3CAFFAFAFFD04FFBCCBFFCA8CB0%FCB08CB0FCB08CB0FCB08CB0FCB08CB0FCB5CAFD2BFFBCFCCAFFCAC3FD04%FFA9FFFFFF9A939BFD04FFBD9AFD04FFC3C3FD09FFBDCBFFFFFFCACA8CCA%FD04FFCAC3FFFF84AFFFFFFFCB9AFFFFC38CB08CB08CB08CB08CB08CB08C%B08CB08CB08CB0C4FD29FF93FC9BFFFFBCCAFFFFFFA8A9FFFF9BC3A193A1%FFFFFFA1CAFD04FF9AFD0AFFC3CAFD04FFCABDFD06FF9AFFFFFF85FD04FF%CABCFFFFBC8CB0FCB08CB0FCB08CB0FCB08CB0FCB08CB08CB0C3FD26FFCA%8DFCBCFFFFC3C4FD04FFA9FFFFCAC3FFFFCABCA1C39ABDFD04FFC3C4FD0B%FF9AFD04FFCA9BFD05FFA194FFFFFFAF84FD04FFC3A1FFFFB68CB08CB08C%B08CB08CB08CB08CB08CB08CB08CFC93FD24FFC38CFC93FFFFC39AFD04FF%AFA8FFFFC38C9ACAC4939A94C3CAFD04FFBCCAFD0BFFC4C3FD04FFC3CAFF%FFFFCAB5A1FFCAFFFFAFA9FD04FFC3CAFFFFBCFCB08CB0FCB08CB0FCB08C%B0FCB08CB0FCB08CB0B0C3FD20FFCAB6FCFCB5FFFFCABCFD05FFA9C3A1FF%C4FF9AB593FD08FFCAC3FD0CFFCABDFD04FFCABCA1CA9A8D94FFCA93A8FF%FF85A9FD04FFBCCAFFFFB68CB08CB08CB08CB08CB08CB08CB08CB08CB08C%B08CB5A1FD1CFFCA94FC8CFC93FFFFCA9AFD05FF84FFA1C394C3FFFFA194%93C4A1FD05FF9AFD0EFFC3CAFD04FFCAC394BCC3FFA19394C3FFFFAFA9FD%04FFCABDCAFFFFBC8CB08CB0FCB08CB0FCB08CB0FCB08CB0FCB08CB08CFC%8DC3CAFD17FFC3BC8CB0FCFC93FFFFCBBCFD05FF85FFFFFF9AFFFFCAFFFF%FFC48CC3FD04FFC3C4FD0FFF9AFD09FF9A8DA1FFFFCAFFFFA8A9FD04FFA8%BCCAFFFFBC8CFC8CB08CB08CB08CB08CB08CB08CB08CB08CB08CFC8CB094%C3A8FD11FFC3BC8DFC8CB08CFC94FFFFCA9AFD05FF84AFFFFF9AC3FFFF93%C3FFCAA8C3CAFFFFFFCABCCAFD0FFFCAC3FD05FFCACA93BCCAFFCABC9ACA%FFFFA9AFFD05FFBDC4FFFFC38CB0FCB08CB0FCB08CB0FCB08CB0FCB08CB0%FCB08CB0FCB08CB5B5BDC3CACAFD07FFCACABCBCB0B08CB0FCB08CB0C3FF%FFCABCFD05FF85AFFFFFCABD93C3CAC3CAFFCABDFD05FFC3C3FD11FFBDCA%FD04FFC38CC3FFFFFF949AFFA1C4FFFF84AFFD05FFBCA1FFFFCA8DFC8CB0%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CFC8CB08CB08DB5%8DB08CB08CFC8CB08CB08CB08CB5C4FFFFC39AFD05FFA9A9FFFFA1C3FFCA%938CA8FFFFCA9AFD04FFCA9AFD12FFCABDFD05FFC3FD04FF93CAFFCA9BFF%FFFFA9AFFD05FFC3BCFFFFFFBCB08CB08CB0FCB08CB0FCB08CB0FCB08CB0%FCB08CB0FCB08CB0FCB08CB08CB08CB08CB08CB0FCB08CB0FCFC8CBDFFFF%FFC3C3FD05FFA9AFFFFFA1C39ACAFFFF9A93A1FF9AFD05FFBCFD14FFA1C3%FD05FFCA9AFFFF9A9AFFCACAA1CAFFFF84A9FD05FFCA94CAFFFFA1B68CFC%8CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB08CB0%8CB08CB08CB08CFC93CAFFFFCABCA1FD05FF84A9FFFFA8C3FD06FFA18D93%FD05FFA1C3FD15FFBCCAFD04FFC3C3FFFF94C3FFFF93C3C3CAFFFFA9AFFD%06FFBCC3FFFFFFC493B0FCB08CB0FCB08CB0FCB08CB0FCB08CB0FCB08CB0%FCB08CB0FCB08CB0FCB08CB0FCB08CB6C3FFFFFFC3BDCAFD05FF85AFFFFF%FFC3FD04FFCBBCCAFF9ACAFD04FFCABDFD17FF9AFD05FF9BCAA193A8FF9B%93FFFF94FFFFFFA985A9FD05FFC3BCA1FFFFFFA1B68CFC8CB08CB08CB08C%B08CB08CB08CB08CB08CB08CB08CB08CB08CB08CFC8CB093C3FFFFFFCA9A%C4FD06FF84AFFD04FF9AFD04FFC38DBCCAFD05FFCBBCCAFD17FFCABDFD05%FFA1C3CAFFFFC393FFCAC4FD04FFAF85A9FD06FFC3BCCAFFFFFFCABCB58C%B08CB08CB0FCB08CB0FCB08CB0FCB08CB0FCB08CB0FCB08CB0B0BCC4FFFF%FFCAC3C3FD07FF85FD05FFCABCFD06FF8DC3FD05FFC3C3FD19FFC3A1FD06%FFC3A1FFA293CAFD05FFA8FFAF8584FD06FFCA9ABDC3FFFFFFCAC394B58C%FC8CFC8CFC8CB08CFC8CB08CFC8CFC8CFC8CB08DBCA1FD04FFCA9AC3A8FD%06FFA984FFFFFFA8FFFFFF93BCFD04FFCAC3A8FD04FFC39BFD1BFFBDCAFD%05FF9ACAFFFF8DFD04FFC393FD04FFAF85FD07FFCAC3BCCACAFD04FFCBC3%C3B6B58DB5FCB08CB0FCB08CB5B5BCBCC4CAFD05FFC3C3C3FD08FFAFA9FF%FFFF9AC3FD04FF8DBCCAFFC4C3CAFD04FFCABCFD1CFFCBBCCAFD05FF9ACA%93BCFFFFA1C39A94FFFFCAFFFFFF84A9A9FD07FFA1C3BDC3CAFD07FFCACA%C3CAA1FD04CAFD06FFCAA1C3BDC4CAFD07FF8494A1FFFFFFA29A8DFD04FF%CA949393C3CAFD04FFCA94FD1EFFCABCCAFD05FFA1C3FFCA9A94FFBCA1FF%CABCCAFFFFFFAFA9A9FD09FFC3C3BDC3C3CACAFD0DFFCACABDC3C3CACAFD%08FFAF85FF938DA1FD04FFBC93FD04FFCBFD08FFBCFD20FFCABCCAFD05FF%A19A9AFFA19A8DFFFFFF8CBCFD05FFAF84AFAFFD09FFA8CAA1C39AC39BC3%9BC39BC39AC39BC39AC3C3CACAFD09FF84A9A8FFFFC3938D94FD04FF9394%FFFFFF94CAFD06FF94CAFD21FFCABDFD06FF9AFFFFFF9ABCFFFFA1BC9AFD%07FFA9AFA9FD0FFFCAFFCAFFCAFFCAFD0DFFAFAF85AFFD04FFA1CACA9393%FFFFFFCAB5C3FFA1C3FD06FFBCCAFD23FFC3BDFD09FF93A1FFCABDA894FF%FFA89AA1CAFFFFFFAF84A9A9FD1DFFA9AF84A9A8FD06FFCA9AFFA18C8CCA%FFFFA89394C3FD06FF9ACAFD25FFCABDFD07FFBD93FFFFBDCAFF93FFFFCA%93BC94C4CAFD05FF7EA2A8FD17FFA9AFA9AFA9FD09FFCBBCA1BCC3BC8CCA%FFFF9ACAFD06FFBCCAFD27FFA8BCCAFD05FFA8BCCAC39AFFFF94A1FF9ACA%A8FFA1939ACAFD04FF938D9A9A77A984AFA9FFA8FFAFFFA8FFAFFFA8FFA9%A984A984A9A8FD05FFA29B9AFD05FF939AA8FFFF9A689A9ACAFD05FFCA9A%CAFD29FFCABCCAFD06FFC48DCAFFFF9AC4CAC3FFFFFFC493FFC3BCCAFFFF%BC94FFCA939AFFA9AFA9AFA9AFA9AFA9AFA9AFA9AFAFFD08FFC39AC4CACA%FD05FFC3CAFFFFFFCAB59AFD06FFCABCFD2CFFCBBCA1FD06FFCAA1FFFFC3%93BDFD04FF93C3FFFF9AFFFFFF8DC3FFFFA18CA8FD12FFCAA1C39ACA9A93%FFFFCAFD05FF9BC3FFFFFFCAA8FD06FFC39AFD2FFFC3BCFD09FFCA8DC4FF%FFFFA1B5FD06FFCA93CAFFFFCA8CCAFD04FFCAFD09FFCACAFFC49BCBCAC4%C3FF93CAFFBCCAFD04FFCA9AFD0AFFC3C3FD31FFCA94CAFD07FFCA9AFD04%FF9A9AFD06FFC38CCBFFFF9393CBFFA2C3A1C394CAFFC393C4FFFFA293A1%CA94FD06FFC38CC39AC3FD04FFA1939AFD07FFCABCA1FD34FFBCC3FD0BFF%CA93FFFFCACAFFFFFF9AB59AC39AC3FFFFCABCCAFFFFCB93CACAB5CAFFFF%FFA1FF9ACAFD06FFCAB5CAFFFFFFCAFFFFC3CAFD07FFC3BDCAFD36FFC3BC%CAFD08FFCA9394FFFFA19A94FFFF939AFF9393FFFFFF949AFD04FFC393FF%93CAFFFFFFC4A193A1FFFFFFA2C3A1FF93C3FFFF9AC3FD09FFCA9AC3FD39%FFCAC3BDFD09FFC3FD07FF8DC3FFCA8CCAFFFF93CAFD04FFA293FFBCA1FF%FFFFA1CA94BCFFFFFFCA93C3FFCA8CC4A1C3CAFD07FFCAC3BCFD3DFFC49A%C4FD0EFFA18DA8FFFF9394FFA893A1FD04FFCA8DFF94C3FFFFFFCAA1CA8C%CAFFFFFF9B93FFA19AA1FD09FFA1BCA1FD40FFC3BDC3FD0BFFC3BC8DC3FF%FFA18DCAFF94BDFD04FF9BBCFFBD9AFFFFFFA1CAFFC393C4CACA9AC3FD0B%FFCABCC4FD43FFCAC39AC4CBFD0BFFA1FFFFFF9393FFCA8DCAFFFFCA93A2%FFA293A1FFA89ACAFFFFCAA1C4A1FD0BFFC3BD9BFD48FFC3C3C3FD0FFF9A%C3FFFF9AC3A1C3CAFFFFFFC3BC9AC3CAFD0FFFCAC3BCC4FD4BFFCACA9AC3%A1FD11FFCACBFD16FFCAC49AC3C3FD50FFCAC4BDC3C3FD23FFCACAC3C3C3%FD56FFCAC39AC3C3CACAFD1AFFCBC3C3BCC3A1CAFD5BFFCACAC3C3BDC3C3%CACAFD0FFFCAFFCAC4BDC3BDC3C4FD64FFA8CAA1C39AC39AC39AC39AC39A%C39AC39AC39BC39BC4C3CACAFD32FFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2006-04-24T14:47:19+02:00</xap:CreateDate>
         <xap:ModifyDate>2006-04-24T14:47:19+02:00</xap:ModifyDate>
         <xap:MetadataDate>2006-04-24T14:47:19+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FUDquu6NpMayalew2iuaRiVwrOf5UX7Tn2UVyMpAc3I0+ly5jWOJl7unv7ks/xRqN5UaNod&#xA;3cp2ubymnwHw2mH1j6RCRkeMnkP0OV+QhD+9yRj5R9Z/2Pp/2ThZ+ebre41Cy0xD1is4HuZB8p52&#xA;RP8AkhjUz1AU5NJD6YTn/WkIj/SxBP8As1w8otLvf63ql4e9LkWg/wCnJbXHw+8n8e5H8oV9GPHH&#xA;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&#xA;3Yq7FXYq7FXYq7FXYq7FXYq//9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:04B4FA8BD52F11DA92738D313D9DBC97</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:04B4FA8CD52F11DA92738D313D9DBC97</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:04B4FA8AD52F11DA92738D313D9DBC97</stRef:instanceID>
            <stRef:documentID>uuid:04B4FA88D52F11DA92738D313D9DBC97</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -282.482 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 282.482 li282.484 282.482 li282.484 0 licpclp[1 0 0 1 0 0 ] concat1 lw0 lc0 lj4 ml[] 0 dshtrue sadj281.984 141.243 mo281.984 63.5122 218.973 0.5 141.24 0.5 cv63.5127 0.5 0.5 63.5122 0.5 141.243 cv0.5 218.972 63.5127 281.982 141.24 281.982 cv218.973 281.982 281.984 218.972 281.984 141.243 cvcpfalse sop/0 [/DeviceCMYK] /CSA add_res0 0.945098 0.937255 0 cmyk@237.868 141.243 mo237.868 87.8755 194.61 44.6143 141.24 44.6143 cv87.8755 44.6143 44.6143 87.8755 44.6143 141.243 cv44.6143 194.608 87.8755 237.867 141.24 237.867 cv194.61 237.867 237.868 194.608 237.868 141.243 cvcp@161.492 214.387 mo121.095 214.387 88.3457 181.64 88.3457 141.243 cv88.3457 100.844 121.095 68.0952 161.492 68.0952 cv187.552 68.0952 210.41 81.7314 223.366 102.247 cv208.77 71.5596 177.486 50.3457 141.24 50.3457 cv91.041 50.3457 50.3457 91.041 50.3457 141.243 cv50.3457 191.443 91.041 232.136 141.24 232.136 cv177.487 232.136 208.771 210.922 223.367 180.235 cv210.411 200.75 187.552 214.387 161.492 214.387 cvcpf0.775447 lw248.233 141.243 mo248.233 82.1504 200.335 34.2485 141.24 34.2485 cv82.1504 34.2485 34.2485 82.1504 34.2485 141.243 cv34.2485 200.333 82.1504 248.232 141.24 248.232 cv200.335 248.232 248.233 200.333 248.233 141.243 cvcp0.745098 0.227451 0 0 cmyk@33.0234 159.469 mo35.4678 161.473 37.0962 164.358 37.875 167.82 cv38.2793 169.618 38.4819 172.23 38.4014 173.892 cv38.3911 174.313 38.377 174.562 38.4775 174.854 cv37.7197 175.06 35.6597 175.697 33.6895 176.421 cv33.4189 176.307 33.2729 175.814 33.4204 175.537 cv35.5718 174.528 37.8311 172.446 36.7456 167.62 cv35.6001 162.526 31.3975 158.926 24.5068 160.476 cv17.5166 162.048 14.6509 167.344 15.8789 172.803 cv16.8447 177.097 20.0679 178.365 22.2041 178.689 cv22.4229 178.885 22.4688 179.399 22.2656 179.585 cv20.4824 179.741 18.0903 179.37 17.3457 179.013 cv17.1895 178.628 16.9663 178.259 16.751 177.923 cv16.3198 177.25 15.2813 174.966 14.8022 172.835 cv14.1284 169.84 14.0835 166.842 15.168 164.045 cv16.3999 160.97 18.9648 158.225 23.2588 157.259 cv26.9541 156.428 30.4907 157.381 33.0234 159.469 cvcp0.00784314 0.945098 0.941176 0.00392157 cmykf27.9414 182.854 mo27.5259 183.018 27.272 183.118 27.207 183.224 cv27.165 183.32 27.2554 183.685 27.7192 184.862 cv28.0469 185.693 28.4849 186.534 29.2568 187.003 cv29.9873 187.436 31.0049 187.647 32.5742 187.029 cv34.3979 186.31 35.6836 184.496 34.6733 181.934 cv34.1094 180.503 33.9897 180.47 33.3433 180.725 cv27.9414 182.854 licp30.4961 179.66 mo32.6895 178.795 33.0547 178.571 32.7969 177.579 cv32.5981 176.804 li32.6494 176.597 33.019 176.451 33.1841 176.6 cv33.8091 177.847 34.5063 179.412 35.3984 181.675 cv35.9624 183.106 36.3838 184.514 36.2256 185.803 cv36.085 187.139 35.3647 188.356 33.749 188.993 cv31.5557 189.857 29.6729 188.6 28.7559 187.627 cv28.5723 187.566 28.3867 187.772 28.2476 187.961 cv25.9976 190.981 24.6333 192.934 23.936 195.021 cv23.7446 195.551 23.7183 196.229 23.9175 196.87 cv23.917 197.003 23.7412 197.1 23.6035 197.021 cv23.4526 196.84 23.2607 196.488 23.0879 196.05 cv22.314 194.088 22.4272 192.683 24.1128 190.125 cv24.73 189.188 25.9497 187.613 26.7065 186.488 cv27.0781 185.941 27.1631 185.481 26.7993 184.558 cv26.3896 183.519 26.3486 183.482 25.8638 183.673 cv22.9551 184.819 li20.5308 185.775 20.272 185.931 20.6152 187.343 cv20.7373 187.854 li20.6763 188.038 20.2656 188.147 20.1421 188.036 cv19.7783 186.979 19.4922 186.185 19.1279 185.262 cv18.7461 184.292 18.395 183.47 17.9214 182.403 cv17.936 182.237 18.2642 182.055 18.4805 182.129 cv18.7769 182.679 li19.4663 183.954 19.7847 183.882 22.2085 182.927 cv30.4961 179.66 licpf37.3516 205.951 mo40.9307 203.963 43.9121 200.234 41.6104 196.092 cv40.3574 193.836 37.1904 191.763 32.4399 194.401 cv29.2295 196.186 25.9321 200.061 28.3062 204.334 cv29.7524 206.938 33.0781 208.325 37.3516 205.951 cvcp30.5405 192.618 mo34.8789 190.208 40.0054 191.618 42.4878 196.087 cv45.2715 201.098 43.0469 205.626 39.229 207.747 cv34.8472 210.182 29.8027 208.612 27.4771 204.426 cv24.8018 199.61 26.6362 194.787 30.5405 192.618 cvcpf44.9478 207.913 mo47.0957 206.395 47.4111 206.11 46.6675 204.844 cv46.3501 204.309 li46.3452 204.13 46.7388 203.912 46.8853 203.991 cv47.561 205.032 48.0278 205.736 48.6294 206.587 cv49.2021 207.397 49.7095 208.072 50.4658 209.057 cv50.4912 209.222 50.1548 209.52 49.9878 209.455 cv49.5894 208.978 li48.6431 207.854 48.27 208.057 46.1221 209.574 cv38.9082 214.673 li36.7603 216.191 36.5049 216.433 37.208 217.729 cv37.5054 218.277 li37.5103 218.457 37.1167 218.674 36.9702 218.596 cv36.2944 217.554 35.8281 216.851 35.2549 216.04 cv34.6533 215.188 34.1465 214.514 33.3896 213.529 cv33.3647 213.365 33.6602 213.095 33.8677 213.131 cv34.2866 213.595 li35.2734 214.689 35.5854 214.529 37.7334 213.012 cv44.9478 207.913 licpf40.8647 224.032 mo39.5313 222.43 39.186 221.007 39.0942 220.47 cv39.3232 219.892 40.4712 218.517 41.3359 217.732 cv41.5488 217.717 41.8247 217.971 41.7739 218.143 cv41.0396 219.238 39.8213 221.575 41.6626 223.788 cv42.9961 225.39 44.6958 225.299 45.8398 224.347 cv46.6792 223.648 47.4707 222.698 47.2085 220.561 cv46.8828 217.764 li46.7188 216.286 46.8853 214.275 48.4492 212.974 cv50.2607 211.466 52.9043 211.655 54.9678 214.135 cv55.46 214.726 55.936 215.491 56.1963 216.114 cv56.3452 216.41 56.5103 216.725 56.6372 216.877 cv56.3223 217.43 55.3975 218.49 54.5962 219.157 cv54.4185 219.176 54.1069 218.919 54.1421 218.728 cv54.8511 217.718 55.6626 216.171 54.1387 214.341 cv52.583 212.472 51.0098 213.103 50.1323 213.833 cv49.0264 214.754 49.0063 216.319 49.1357 217.406 cv49.4521 219.726 li49.7085 221.547 49.5864 223.649 47.7744 225.158 cv45.6763 226.904 42.9287 226.512 40.8647 224.032 cvcpf49.0391 233.042 mo47.563 231.57 47.0864 230.185 46.9453 229.659 cv47.1196 229.062 48.1348 227.586 48.9229 226.726 cv49.1333 226.689 49.4321 226.917 49.3975 227.093 cv48.7676 228.252 47.772 230.692 49.8105 232.725 cv51.2871 234.195 52.9712 233.947 54.022 232.893 cv54.793 232.119 55.4927 231.101 55.0332 228.995 cv54.4492 226.242 li54.1484 224.786 54.1274 222.769 55.5635 221.327 cv57.2275 219.657 59.877 219.6 62.1621 221.877 cv62.707 222.42 63.252 223.139 63.5688 223.734 cv63.7451 224.015 63.9385 224.313 64.0791 224.453 cv63.8169 225.032 62.9941 226.174 62.2583 226.912 cv62.083 226.948 61.7495 226.721 61.7666 226.527 cv62.3789 225.456 63.043 223.841 61.3555 222.159 cv59.6328 220.442 58.125 221.217 57.3193 222.025 cv56.3037 223.045 56.4292 224.606 56.6592 225.677 cv57.1895 227.957 li57.6138 229.745 57.6875 231.851 56.0234 233.521 cv54.0967 235.454 51.3242 235.318 49.0391 233.042 cvcpf62.96 234.522 mo62.4473 234.843 62.4512 234.877 62.9922 235.313 cv65.3696 237.228 li65.9302 237.679 66.0308 237.633 66.2773 236.971 cv67.77 232.979 li67.9893 232.392 68.2354 231.729 68.3062 231.404 cv68.2676 231.373 li68.1318 231.423 67.5649 231.731 66.8853 232.14 cv62.96 234.522 licp65.4014 239.324 mo65.6084 238.79 65.5781 238.67 64.998 238.203 cv62.0796 235.853 li61.5967 235.464 61.4341 235.428 60.9717 235.725 cv58.6611 237.21 li57.6709 237.846 57.1157 238.259 56.9443 238.472 cv56.7578 238.703 56.7607 238.897 57.1934 239.31 cv57.7847 239.881 li57.8423 240.087 57.5933 240.396 57.3569 240.333 cv56.8857 239.89 56.2866 239.407 55.3936 238.656 cv54.7559 238.143 54.0288 237.621 53.4917 237.221 cv53.438 237.05 53.6484 236.709 53.8418 236.706 cv54.5264 237.162 li55.0215 237.496 55.6177 237.626 56.4487 237.148 cv57.5127 236.539 59.0654 235.719 61.6201 234.208 cv67.7935 230.577 li68.624 230.1 69.0361 229.825 69.2271 229.47 cv69.7998 229.708 70.4082 229.624 70.8232 229.544 cv70.9395 229.638 71.0435 229.785 70.9731 229.952 cv70.5396 231.005 70.1328 232.143 69.7383 233.227 cv66.1294 243.128 li65.3516 245.241 65.3696 245.733 66.1226 246.499 cv66.5977 246.978 li66.6553 247.184 66.3677 247.461 66.209 247.461 cv65.4478 246.784 64.7866 246.22 63.917 245.52 cv62.9893 244.772 62.2236 244.22 61.6475 243.788 cv61.5552 243.586 61.7847 243.262 61.998 243.273 cv62.605 243.667 li63.042 243.955 63.4063 244.057 63.5615 243.864 cv63.7329 243.651 63.9165 243.226 64.1353 242.637 cv65.4014 239.324 licpf82.2349 252.233 mo81.8496 252.871 80.3218 255.397 80.0518 255.988 cv79.9321 256.09 79.7407 256.119 79.5073 255.979 cv79.4707 255.463 79.3042 254.348 78.7275 251.129 cv77.1899 242.544 li77.0146 241.539 76.6235 238.925 76.46 238.188 cv76.4175 238.162 li76.1782 238.366 75.8618 238.842 75.4766 239.479 cv72.6782 244.107 li72.0747 245.105 70.4482 247.892 70.4028 248.734 cv70.4106 249.058 70.7368 249.43 71.2422 249.793 cv71.8618 250.255 li71.8867 250.501 71.7114 250.743 71.4985 250.76 cv70.5684 250.14 69.8384 249.669 69.0527 249.194 cv68.1606 248.654 67.5742 248.329 66.8057 247.923 cv66.7212 247.727 66.8794 247.416 67.084 247.366 cv67.6958 247.648 li68.21 247.901 68.6396 247.958 68.8867 247.789 cv69.6465 247.204 71.1914 244.601 71.8076 243.581 cv75.5176 237.444 li75.877 236.85 76.1255 236.391 75.9746 235.633 cv75.8574 235.156 75.4375 234.699 74.9663 234.327 cv74.6309 234.066 li74.5806 233.862 74.7729 233.544 74.9946 233.562 cv75.8477 234.164 76.9731 234.845 77.3555 235.076 cv77.6953 235.281 78.0693 235.479 78.3706 235.603 cv78.1406 236.942 78.9731 241.273 79.1777 242.47 cv79.8384 246.029 li80.2808 248.559 80.6367 250.369 81.0186 251.991 cv81.061 252.018 li81.21 251.962 81.4155 251.622 81.6851 251.177 cv84.4321 246.632 li85.0356 245.634 86.6831 242.86 86.665 241.979 cv86.6533 241.712 86.3901 241.379 85.605 240.759 cv85.27 240.498 li85.1982 240.281 85.4248 239.954 85.6333 239.993 cv86.5845 240.626 87.2935 241.084 88.1006 241.571 cv89.0137 242.124 89.5786 242.437 90.3262 242.83 cv90.4321 243.039 90.252 243.337 90.0479 243.387 cv89.7246 243.25 li88.981 242.945 88.4536 242.858 88.2661 242.977 cv87.4429 243.522 85.8936 246.182 85.3027 247.158 cv82.2349 252.233 licpf92.4727 257.447 mo91.4458 259.842 91.3545 260.181 92.6182 260.885 cv93.3188 261.267 li93.4165 261.416 93.1948 261.808 93.0283 261.817 cv91.748 261.214 90.9824 260.858 90.0703 260.467 cv89.1582 260.076 88.3501 259.757 86.8711 259.176 cv86.7637 259.049 86.8843 258.642 87.1157 258.605 cv87.9663 258.89 li89.3149 259.333 89.5757 259.04 90.6025 256.646 cv94.9751 246.452 li95.2783 245.745 95.2881 245.722 94.604 245.429 cv93.3496 244.891 li92.3691 244.47 91.0952 243.978 90.3003 244.258 cv89.5376 244.524 89.0947 244.929 88.5991 245.391 cv88.3579 245.449 88.0879 245.198 88.0747 244.977 cv88.8799 244.107 89.8477 242.794 90.3989 241.95 cv90.4868 241.935 90.793 242.039 90.832 242.137 cv90.6558 242.925 91.4185 243.225 92.4673 243.675 cv101.703 247.637 li102.935 248.165 103.159 248.207 103.756 247.761 cv103.89 247.765 104.13 247.895 104.137 248.006 cv103.485 248.833 102.533 250.611 102.308 251.325 cv102.139 251.469 101.751 251.302 101.695 251.116 cv101.872 250.517 102.074 249.604 101.839 249.207 cv101.481 248.595 100.693 248.04 99.4385 247.502 cv97.8193 246.808 li97.1353 246.515 97.1484 246.547 96.8257 247.3 cv92.4727 257.447 licpf103.793 259.08 mo103.995 259.333 103.992 259.646 103.888 259.952 cv103.807 260.187 103.664 260.374 103.499 260.475 cv97.8521 259.116 li97.6665 258.816 97.6772 258.479 97.7578 258.244 cv97.8379 258.01 97.981 257.822 98.1465 257.722 cv103.793 259.08 licpf112.469 254.971 mo112.338 255.571 112.259 255.938 112.33 256.093 cv112.408 256.215 112.894 256.39 114.594 256.759 cv115.795 257.02 117.091 257.162 118.217 256.639 cv119.27 256.134 120.289 255.133 120.782 252.866 cv121.354 250.231 120.264 247.376 116.563 246.572 cv114.495 246.123 114.366 246.235 114.164 247.169 cv112.469 254.971 licp110.771 249.609 mo111.458 246.441 111.481 245.853 110.15 245.39 cv109.112 245.024 li108.916 244.807 109.031 244.273 109.327 244.198 cv111.23 244.437 113.553 244.837 116.82 245.546 cv118.888 245.995 120.818 246.589 122.171 247.756 cv123.591 248.937 124.432 250.69 123.925 253.024 cv123.236 256.192 120.359 257.383 118.548 257.688 cv118.337 257.852 118.432 258.221 118.54 258.524 cv120.273 263.404 121.461 266.456 123.315 268.849 cv123.774 269.472 124.528 270.02 125.414 270.282 cv125.565 270.385 125.541 270.659 125.346 270.756 cv125.023 270.791 124.476 270.742 123.843 270.604 cv121.008 269.988 119.489 268.786 117.853 264.904 cv117.254 263.482 116.387 260.885 115.679 259.159 cv115.338 258.317 114.877 257.868 113.543 257.578 cv112.043 257.253 111.969 257.271 111.817 257.972 cv110.905 262.173 li110.144 265.674 110.124 266.088 112 266.775 cv112.678 267.027 li112.842 267.237 112.652 267.79 112.431 267.847 cv110.945 267.454 109.818 267.174 108.484 266.885 cv107.084 266.58 105.876 266.353 104.295 266.079 cv104.117 265.936 104.159 265.421 104.41 265.231 cv105.265 265.313 li107.249 265.499 107.41 265.08 108.17 261.579 cv110.771 249.609 licpf140.866 263.61 mo141.084 259.521 139.51 255.015 134.777 254.763 cv132.2 254.625 128.762 256.206 128.473 261.633 cv128.276 265.3 129.808 270.152 134.688 270.413 cv137.662 270.571 140.605 268.491 140.866 263.61 cvcp125.952 262.294 mo126.216 257.338 130.135 253.744 135.239 254.017 cv140.964 254.321 143.617 258.613 143.385 262.974 cv143.118 267.979 139.108 271.419 134.326 271.164 cv128.825 270.87 125.715 266.754 125.952 262.294 cvcpf158.147 259.757 mo158.006 258.225 157.693 255.388 157.205 254.686 cv157.005 254.404 156.544 254.272 155.922 254.28 cv155.299 254.288 li155.135 254.129 155.154 253.804 155.294 253.69 cv156.237 253.653 157.154 253.594 158.117 253.504 cv159.155 253.408 159.82 253.322 160.705 253.19 cv160.914 253.296 160.919 253.619 160.81 253.778 cv160.221 253.883 li159.607 253.989 159.134 254.258 159.04 254.59 cv158.745 255.439 159.032 258.279 159.161 259.663 cv159.419 262.455 li159.618 264.604 159.482 266.909 158.235 268.521 cv157.28 269.779 155.512 270.592 153.684 270.761 cv151.979 270.918 150.244 270.755 148.937 269.829 cv147.526 268.863 146.742 267.116 146.471 264.176 cv145.931 258.345 li145.693 255.775 145.604 255.359 144.16 255.368 cv143.538 255.376 li143.381 255.291 143.392 254.866 143.532 254.778 cv144.772 254.714 145.615 254.661 146.604 254.569 cv147.616 254.476 148.43 254.376 149.636 254.214 cv149.791 254.274 149.879 254.69 149.74 254.803 cv149.151 254.907 li147.729 255.163 147.719 255.588 147.957 258.157 cv148.45 263.494 li148.818 267.473 150.296 269.978 154.077 269.628 cv157.659 269.296 158.758 266.354 158.41 262.598 cv158.147 259.757 licpf177.644 263.326 mo177.875 264.291 178.158 264.835 178.633 264.9 cv178.723 264.955 178.758 265.1 178.679 265.195 cv178.389 265.265 177.978 265.466 177.548 265.696 cv176.351 266.341 174.683 267.047 173.38 267.359 cv170.508 268.049 167.688 267.884 165.378 266.447 cv163.583 265.347 162.354 263.626 161.844 261.502 cv161.352 259.451 161.529 257.214 162.644 255.263 cv163.854 253.186 165.972 251.479 169.615 250.604 cv170.99 250.274 172.333 250.233 172.767 250.231 cv173.248 250.218 174.037 250.207 174.314 250.09 cv174.506 250.886 174.951 252.105 175.516 253.501 cv175.49 253.712 175.062 253.84 174.882 253.73 cv173.581 251.286 171.574 250.899 169.113 251.49 cv164.433 252.613 163.18 256.436 164.048 260.055 cv165.159 264.688 168.423 267.758 173.272 266.595 cv174.769 266.235 175.586 265.708 175.753 265.233 cv175.833 265.036 175.85 264.572 175.664 263.801 cv175.433 262.835 li174.946 260.809 174.84 260.681 173.303 260.871 cv172.213 261.005 li171.996 260.955 171.916 260.515 172.067 260.401 cv172.779 260.282 174.112 259.988 175.536 259.646 cv176.477 259.421 177.291 259.2 178.076 258.961 cv178.268 259.017 178.379 259.373 178.245 259.558 cv177.87 259.699 li176.886 260.063 177.023 260.744 177.319 261.975 cv177.644 263.326 licpf179.053 252.134 mo178.135 249.722 177.956 249.391 176.526 249.749 cv176.137 249.844 li175.963 249.805 175.851 249.369 175.963 249.247 cv176.978 248.914 177.775 248.637 178.727 248.275 cv183.086 246.616 li184.57 246.052 185.938 245.531 186.19 245.355 cv186.479 245.696 187.255 247.313 187.735 248.299 cv187.695 248.474 187.342 248.661 187.173 248.565 cv186.411 247.608 185.894 246.876 184.572 247.033 cv184.041 247.103 183.29 247.361 182.27 247.75 cv180.6 248.385 li179.904 248.649 179.922 248.696 180.257 249.577 cv182.021 254.216 li182.269 254.865 182.339 254.839 183.034 254.574 cv184.38 254.063 li185.354 253.691 186.055 253.372 186.298 253.173 cv186.541 252.975 186.65 252.773 186.546 252.149 cv186.369 251.128 li186.433 250.945 186.827 250.795 186.981 250.922 cv187.193 251.479 187.444 252.418 187.779 253.3 cv188.098 254.135 188.525 254.98 188.72 255.491 cv188.688 255.688 188.294 255.839 188.125 255.743 cv187.572 254.919 li187.321 254.536 187.026 254.25 186.519 254.311 cv186.158 254.342 185.593 254.53 184.688 254.874 cv183.343 255.386 li182.647 255.65 182.587 255.7 182.816 256.304 cv184.061 259.573 li184.528 260.803 184.897 261.564 185.419 261.817 cv185.803 261.99 186.387 262.06 188.428 261.283 cv190.214 260.604 190.851 260.256 191.264 259.807 cv191.593 259.415 191.91 258.365 192.055 256.93 cv192.173 256.752 192.524 256.698 192.696 256.872 cv192.843 257.745 192.942 259.752 192.879 260.492 cv190.774 261.24 188.701 262.003 186.637 262.788 cv184.55 263.582 li183.553 263.961 182.772 264.284 181.422 264.852 cv181.257 264.835 181.069 264.481 181.155 264.289 cv181.895 263.929 li183.172 263.31 183.155 262.918 182.229 260.482 cv179.053 252.134 licpf200.229 244.397 mo200.407 245.209 200.454 245.221 201.269 244.722 cv204.847 242.528 li205.69 242.011 205.677 241.859 204.934 241.234 cv200.457 237.455 li199.796 236.899 199.053 236.274 198.664 236.032 cv198.606 236.068 li198.608 236.268 198.745 237.144 198.96 238.213 cv200.229 244.397 licp207.576 243.456 mo206.98 242.941 206.811 242.925 205.938 243.46 cv201.545 246.152 li200.818 246.598 200.697 246.792 200.868 247.528 cv201.722 251.207 li202.088 252.783 202.365 253.693 202.562 254.014 cv202.775 254.362 203.028 254.448 203.762 254.078 cv204.775 253.577 li205.068 253.598 205.354 254.063 205.163 254.34 cv204.371 254.745 203.469 255.298 202.084 256.106 cv201.124 256.695 200.112 257.396 199.345 257.906 cv199.099 257.896 198.756 257.467 198.841 257.214 cv199.747 256.538 li200.41 256.053 200.854 255.34 200.619 254.043 cv200.322 252.384 199.979 249.994 199.203 245.987 cv197.356 236.314 li197.122 235.018 196.957 234.357 196.585 233.945 cv197.158 233.314 197.332 232.487 197.42 231.913 cv197.595 231.806 197.834 231.739 198.017 231.907 cv199.18 232.956 200.465 234.009 201.687 235.021 cv212.839 244.272 li215.216 246.258 215.861 246.462 217.201 245.841 cv218.04 245.446 li218.333 245.468 218.561 245.969 218.486 246.174 cv217.258 246.847 216.222 247.441 214.913 248.244 cv213.517 249.1 212.446 249.836 211.621 250.382 cv211.316 250.408 211.003 249.96 211.117 249.69 cv211.907 249.086 li212.482 248.653 212.782 248.229 212.604 247.938 cv212.408 247.618 211.941 247.184 211.281 246.628 cv207.576 243.456 licpf212.341 234.311 mo210.693 232.292 210.404 232.016 209.114 232.907 cv208.603 233.262 li208.424 233.278 208.18 232.901 208.248 232.749 cv209.356 231.909 210.025 231.396 210.795 230.768 cv211.545 230.156 212.183 229.604 213.112 228.78 cv213.275 228.744 213.596 229.059 213.543 229.229 cv213.113 229.645 li212.058 230.666 212.27 231.006 213.917 233.024 cv219.376 239.715 li220.364 240.927 220.83 241.379 221.474 241.462 cv221.858 241.501 222.412 241.434 223.931 240.194 cv225.564 238.861 225.906 238.455 226.072 238.03 cv226.269 237.486 226.204 236.386 225.788 235.092 cv225.825 234.901 226.253 234.681 226.363 234.815 cv226.535 235.026 227.598 237.427 227.752 238.166 cv226.739 238.927 224.897 240.398 222.917 242.014 cv221.148 243.457 li220.341 244.116 219.741 244.638 218.696 245.555 cv218.533 245.591 218.244 245.314 218.266 245.104 cv218.795 244.576 li219.816 243.552 219.635 243.251 217.988 241.232 cv212.341 234.311 licpf237.718 224.393 mo238.434 225.08 238.967 225.385 239.401 225.184 cv239.507 225.181 239.614 225.284 239.599 225.407 cv239.393 225.622 239.155 226.013 238.918 226.439 cv238.258 227.628 237.235 229.123 236.307 230.09 cv234.262 232.22 231.798 233.604 229.078 233.642 cv226.974 233.685 225.01 232.899 223.435 231.387 cv221.913 229.926 220.854 227.947 220.739 225.703 cv220.638 223.301 221.497 220.721 224.093 218.018 cv225.072 216.998 226.18 216.238 226.544 216.003 cv226.941 215.731 227.6 215.297 227.771 215.048 cv228.361 215.614 229.395 216.401 230.624 217.271 cv230.715 217.462 230.424 217.802 230.213 217.806 cv227.799 216.451 225.901 217.209 224.148 219.035 cv220.814 222.507 221.823 226.4 224.509 228.979 cv227.945 232.278 232.35 233.101 235.804 229.503 cv236.869 228.394 237.272 227.508 237.157 227.019 cv237.118 226.809 236.882 226.41 236.309 225.86 cv235.593 225.173 li234.089 223.729 233.931 223.68 232.739 224.669 cv231.894 225.371 li231.685 225.445 231.38 225.118 231.446 224.941 cv231.98 224.456 232.943 223.489 233.958 222.433 cv234.628 221.735 235.194 221.109 235.726 220.484 cv235.918 220.428 236.203 220.668 236.19 220.896 cv235.951 221.217 li235.318 222.055 235.803 222.554 236.716 223.43 cv237.718 224.393 licpf231.479 208.551 mo231.321 208.681 231.107 208.677 230.973 208.483 cv230.908 203.615 li230.892 203.264 230.944 203.024 231.048 202.885 cv231.151 202.746 231.514 202.675 231.876 202.728 cv232.269 202.74 232.537 202.878 232.612 203.026 cv232.692 203.209 232.654 203.428 232.566 203.796 cv231.479 208.551 licp232.898 214.176 mo230.825 212.639 230.497 212.456 229.485 213.528 cv229.209 213.818 li229.04 213.879 228.711 213.572 228.74 213.408 cv229.086 212.985 229.387 212.621 229.667 212.242 cv229.968 211.879 230.249 211.5 230.545 211.102 cv233.324 207.354 li234.271 206.079 235.143 204.903 235.261 204.62 cv235.688 204.752 237.212 205.697 238.147 206.268 cv238.208 206.437 238.012 206.785 237.818 206.796 cv236.659 206.399 235.829 206.062 234.801 206.905 cv234.391 207.25 233.897 207.873 233.247 208.75 cv232.183 210.185 li231.739 210.782 231.779 210.813 232.536 211.374 cv236.521 214.331 li237.08 214.745 237.124 214.686 237.567 214.088 cv238.426 212.932 li239.046 212.095 239.465 211.447 239.563 211.149 cv239.66 210.851 239.645 210.622 239.22 210.153 cv238.521 209.388 li238.476 209.199 238.727 208.86 238.926 208.884 cv239.403 209.239 240.122 209.896 240.879 210.457 cv241.597 210.989 242.413 211.472 242.852 211.797 cv242.932 211.98 242.681 212.319 242.487 212.33 cv241.576 211.933 li241.159 211.746 240.756 211.664 240.361 211.988 cv240.074 212.208 239.699 212.672 239.123 213.449 cv238.266 214.604 li237.821 215.203 237.797 215.277 238.315 215.662 cv241.125 217.746 li242.182 218.53 242.903 218.973 243.479 218.905 cv243.896 218.844 244.425 218.588 245.727 216.834 cv246.864 215.3 247.214 214.663 247.319 214.062 cv247.387 213.556 247.088 212.5 246.437 211.213 cv246.44 210.999 246.707 210.765 246.945 210.818 cv247.54 211.475 248.704 213.111 249.05 213.77 cv248.365 214.652 247.68 215.534 247.029 216.411 cv246.344 217.293 245.693 218.17 245.028 219.066 cv243.697 220.86 li243.062 221.717 242.579 222.409 241.746 223.614 cv241.598 223.689 241.249 223.493 241.219 223.285 cv241.646 222.583 li242.39 221.373 242.165 221.052 240.072 219.499 cv232.898 214.176 licpf244.563 203.605 mo244.95 203.828 245.187 203.964 245.31 203.949 cv245.412 203.921 245.64 203.623 246.27 202.525 cv246.714 201.751 247.098 200.884 246.982 199.987 cv246.863 199.147 246.395 198.22 244.931 197.38 cv243.23 196.404 241.011 196.533 239.641 198.922 cv238.875 200.256 238.924 200.37 239.526 200.716 cv244.563 203.605 licp240.473 203.604 mo238.428 202.432 238.024 202.286 237.411 203.106 cv236.93 203.746 li236.735 203.835 236.391 203.638 236.403 203.416 cv236.987 202.148 237.775 200.627 238.985 198.518 cv239.751 197.183 240.588 195.975 241.693 195.294 cv242.824 194.569 244.226 194.372 245.731 195.236 cv247.776 196.409 247.97 198.666 247.782 199.989 cv247.85 200.171 248.127 200.187 248.36 200.178 cv252.125 200.049 254.501 199.896 256.568 199.137 cv257.101 198.956 257.646 198.554 258.022 197.997 cv258.128 197.914 258.313 197.991 258.337 198.148 cv258.29 198.38 258.136 198.748 257.9 199.157 cv256.851 200.987 255.683 201.775 252.633 202.057 cv251.515 202.159 249.523 202.189 248.172 202.301 cv247.514 202.353 247.101 202.573 246.606 203.434 cv246.051 204.402 246.048 204.458 246.5 204.717 cv249.212 206.273 li251.472 207.57 251.755 207.675 252.643 206.525 cv252.967 206.11 li253.148 206.043 253.49 206.296 253.48 206.463 cv252.882 207.406 252.44 208.126 251.946 208.986 cv251.428 209.891 251.004 210.678 250.467 211.714 cv250.328 211.806 249.98 211.664 249.904 211.448 cv250.148 210.873 li250.714 209.538 250.459 209.335 248.199 208.038 cv240.473 203.604 licpf247.488 190.578 mo245.094 189.49 244.689 189.36 243.971 190.642 cv243.669 191.187 li243.517 191.28 243.131 191.051 243.124 190.884 cv243.683 189.775 244.055 189.018 244.486 188.068 cv244.896 187.165 245.224 186.387 245.691 185.237 cv245.821 185.132 246.248 185.271 246.277 185.448 cv246.065 186.033 li245.572 187.418 245.936 187.638 248.33 188.727 cv256.372 192.382 li258.767 193.471 259.104 193.569 259.867 192.308 cv260.192 191.774 li260.344 191.68 260.73 191.909 260.736 192.076 cv260.178 193.185 259.806 193.942 259.396 194.847 cv258.964 195.795 258.638 196.573 258.169 197.724 cv258.04 197.828 257.657 197.709 257.584 197.512 cv257.772 196.916 li258.221 195.512 257.925 195.322 255.53 194.234 cv247.488 190.578 licpf250.369 183.89 mo247.934 183.034 247.566 182.958 246.917 184.281 cv246.739 184.64 li246.596 184.747 246.191 184.553 246.17 184.388 cv246.57 183.396 246.873 182.609 247.211 181.649 cv248.756 177.248 li249.282 175.749 249.768 174.368 249.796 174.063 cv250.243 174.062 251.979 174.513 253.041 174.781 cv253.148 174.924 253.064 175.315 252.883 175.383 cv251.659 175.348 250.766 175.271 250.033 176.381 cv249.744 176.832 249.457 177.573 249.096 178.603 cv248.504 180.289 li248.257 180.991 248.304 181.008 249.193 181.32 cv253.876 182.964 li254.531 183.194 254.557 183.124 254.803 182.422 cv255.279 181.063 li255.625 180.081 255.833 179.338 255.838 179.024 cv255.843 178.711 255.76 178.497 255.216 178.175 cv254.322 177.65 li254.223 177.484 254.362 177.086 254.559 177.05 cv255.121 177.247 256.001 177.661 256.891 177.974 cv257.733 178.27 258.656 178.488 259.171 178.67 cv259.302 178.821 259.162 179.219 258.98 179.286 cv257.994 179.177 li257.539 179.122 257.131 179.163 256.85 179.59 cv256.641 179.885 256.42 180.438 256.099 181.352 cv255.622 182.71 li255.376 183.412 255.374 183.49 255.983 183.704 cv259.284 184.863 li260.525 185.299 261.346 185.509 261.875 185.273 cv262.255 185.092 262.686 184.69 263.408 182.63 cv264.042 180.827 264.187 180.115 264.109 179.51 cv264.023 179.006 263.426 178.086 262.423 177.05 cv262.363 176.845 262.549 176.542 262.792 176.522 cv263.554 176.974 265.151 178.192 265.677 178.719 cv264.89 180.81 264.135 182.885 263.402 184.969 cv262.663 187.075 li262.31 188.082 262.053 188.887 261.615 190.284 cv261.495 190.4 261.104 190.315 261.013 190.126 cv261.214 189.328 li261.565 187.953 261.256 187.712 258.797 186.849 cv250.369 183.89 licpf265.472 160.391 mo266.2 160.543 269.091 161.147 269.737 161.207 cv269.873 161.285 269.964 161.457 269.908 161.724 cv269.435 161.929 268.438 162.456 265.591 164.066 cv258.001 168.361 li257.11 168.859 254.773 170.095 254.133 170.493 cv254.122 170.542 li254.394 170.7 254.947 170.841 255.676 170.993 cv260.971 172.1 li262.112 172.339 265.28 172.95 266.09 172.714 cv266.393 172.6 266.635 172.169 266.811 171.571 cv267.041 170.834 li267.266 170.729 267.552 170.813 267.638 171.009 cv267.361 172.092 267.159 172.938 266.971 173.836 cv266.758 174.856 266.646 175.517 266.516 176.377 cv266.359 176.521 266.014 176.475 265.898 176.299 cv265.963 175.628 li266.031 175.059 265.942 174.635 265.7 174.458 cv264.897 173.935 261.929 173.34 260.763 173.096 cv253.743 171.629 li253.063 171.486 252.548 171.404 251.883 171.798 cv251.472 172.066 251.18 172.614 250.985 173.182 cv250.851 173.584 li250.674 173.699 250.31 173.623 250.253 173.409 cv250.539 172.404 250.809 171.116 250.899 170.68 cv250.98 170.291 251.043 169.873 251.061 169.547 cv252.4 169.32 256.211 167.1 257.272 166.511 cv260.412 164.708 li262.652 163.452 264.241 162.517 265.646 161.619 cv265.656 161.57 li265.555 161.448 265.166 161.366 264.656 161.26 cv259.459 160.174 li258.317 159.935 255.154 159.299 254.329 159.608 cv254.08 159.708 253.854 160.066 253.528 161.013 cv253.394 161.415 li253.213 161.555 252.829 161.449 252.797 161.24 cv253.079 160.133 253.275 159.312 253.469 158.389 cv253.687 157.345 253.795 156.708 253.919 155.872 cv254.081 155.703 254.421 155.774 254.536 155.95 cv254.514 156.301 li254.473 157.104 254.565 157.63 254.739 157.768 cv255.527 158.363 258.55 158.944 259.667 159.178 cv265.472 160.391 licpf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 12.0.1%%For: (SC) (IFRC)%%Title: (croissant_rouge_algerien.eps)%%CreationDate: 4/24/06 2:47 PM%AI9_DataStream%Gb"07gMUOlQ6dBo!ta\:H?<O+4j'?3Fj;^'(K3LXa^CC6WK\N:G,nJG&1@_t@O6Yc-5i5N_>oca1mhY6T9snmVu2+GC-W%i=[:2;%CMgD!r(<$.6HX2:#a4W1mCI/lD4C@=LBlGWY9%%U4ZU%O_hYRELpNrdZe4rW2KjEX+9'O(BBQbIAbPFJ"r,jri\4L!DSHP]WjMY?%W.WV^\itK?o_e"Be!o[0o@r$;lc\U`gCIqPhk"0!5!FC(T:F4+oD.M0p$ZMuQ`"K2h0V-]W;Z;^iq!$BqW@&,h5oA7!"3/>l>LRB%N`F,8JNp_,]6sVQr)9YDrqN7dp@0^ukeH3Ecd2(JCr"V3D1akHpcne6_rnLQf2()8LU1`FBSW8fHr6`Vrq:TocKa)0J+qXlZiAJ(%h2Si6pV3rto8bqliq)bSV`1Mt(Y;a>^,:nup>PB%r9MhpQZjA)Cb0-Nms[!t(B4']-dMe&AYj9FZ#4E.ohY&AT`FYupM9[KMre#G%gP1/TY+@L,>;gZtl).&8VGZT\R`3iAD7k&*To\q%:a#J`k>.^UT&-#ZZ(!T:\$O`:qdH]4?@;)#D9YHcc$g]0IT@CjFOk(dK`.e9%LY36=rN:u,4qbm2mk2n8s.N<-fu;Ltp$F]TnY[19U4rEfh<,USBT(`EG/*:rDDoFZIi-V,cTcc*H%,@SX,B&,.bd^5i8a.DkEfFt%Drpcb'SJ//+b"ch?_?1;3PR?o^V5)U-2MR=<0]ZDeao[dVr+(uDM("FjOs@ZYHRsNa8LIep-Vc6g!K@LcWRqg-,W"bB?;K=CWT>O%=WbX9BAPDt5qBMA^+j.^r6u#?PFIIX(KV\Z.bT=If/FM,7q1nUfq;]Ba8Rdg8bkkD[9;DCSR4B$lK6:-O2lFDCB*>?e\SH(H2dH:%X4%HLX;UeC#_%#;DSnFp]fS)j=&n)CDpJA:48ALZ>ZTMk!e,>6I]%kVLPH`c!rdq):IDpq+m@D8A(4P]Y!]1k_n3'=WNJUfXuehm%D5MtA.A9G@#IRJsWK^3dYOEL-%M)G%n.7Gf&+Rd#+j(cHj4!&KY!_U:@si`QX?%9)`iJX.7t$8`q=@u.JDVc/3T2nh@8;*Fq@#0s%Dj8(sn/LuEQr%)4$,?!?1W"(;,Wr&;bQts<Du9bQF$cM9VYWe3bR;0_k4fdt]KR1CE%EOI9DGWXR^knkZ"n1@*@&mGPY:4+.Ei=;%d?7O,Zdrbm1&OHhbV-0(YbJ^r++E5jAuG=BDiG_Jr'i-Z&&5N0U(ZEbrM.D,!uQ<\T=ebST<O>R_HY$<B!0Nkj;OB]<Qf[$<$FOT%K@shY`9^<)Zdu%A++BuLkSs+,:/i%E;$OA]H^H6Do8YN&*^nhPL,5rBC;\+].ADO?(O8`/GE#@"=22Tk7\3[,cV7n>WSG*h=+,M"%7jAg_MOLs8_Mq_Yjs0^C\Qs@O*bK:13@j-(UjZ*aVYcMT:j]"3bj".;B.T,0J.Z?dU@sD&4OuXOgooF3c+:(Qi3/qcm8)3pPOYiJ%)"i@UX(Um0gBo_8e^O8=5Q91h%!k,H\aRA,q-9PNJ+Xd$kl(9XcecR7,=0>aH6,5tqsgk]W]ZI-=?HH3]'=]mVnY.)-6C2#paEM(%\bY4^po'(*iS\DB#QO]TbB4CI1TpsV#DY$`;B;G_[>4>H=fKpm&8pt2*jW1uHrM2HAITDXNoNFkBR)c]+#T$D%LAJt2IJ+M7,t[9%%JgM/?1a^bR\)c1I=+(7eSCcf.X`.Mp(:jH%e2T78\G6'XN)khb<A:Ci'c*VoNKglYW:m<5a#ia;$9^3:mm+WbVa>9`+X<XGe9Vd%oS=E:2)L(sdR/G1HuR$X#FZ\0Z[#\l<l4>C+/u-R0X?=!9\'D*`)pAf>ON`\e%-WK$B3QVS1T)(0_U-O6\?GR%E&"HQ.4,7><T!4%[>q/4Q;lnkER=?HGOi.2?g?+s\#?M)p7o4@B5Qb"<j/c;J5?$nW05[eqQ8qr%X[74--U`rp6J-!e\OeCo77TgIgJ3:%Wbd5C&h#6%1/1Kr3@>U=j"`j-'nu&?;5*nJ>A:bSNb@fh")3P\FL_o43G9CdGNMAao/oM*S%7#%J]`%U8N=mmJ^rl7co*UUojc1DD3.`NS?o-h%@O[T\b/i-0&Op)bWmOV\\d^73h@[X1U>;ior,U-n7gIR`LnA0]0tlRBRf`(.q6J).(l<4K5&/C*J5Tb&_4]BJEUGdW#2?E7#H`;4%4rjU&mjZ3T[_c2h"'<fM<BWo/3N^iI%/Z*rJ*YE+Pgd7('f2E)dsd6CX$t,#%r8Pj.j%Tgj.`ADFZe9,S37\MBh\R0%66<j5?BB*%TZqngRJ@>B]lnT:]Yu!b<H[<-4<fbTX&(a#4Jm+%8[NS9nC+Q"BDp-X[B.F%OiHLi1Df.=C62>__Y(#j1QRM0gD64"((ON-C7P%a%@17W53:BK:LLkjrBT4E5)"_fWF9rR_,tV7XgcDH]26:YpI=.EP=sR=L35g'3g;[4e'SDXkNkaQB<G=%GMXR7Z3oe3qS8c+tc==!M%4O[]X,c+Ek>s_fIKh(Gk$^Al*ATYEt&)1cW2*,+MdRr4[5L:7O"&+c0.?<q"PaV1kUl49?0(Q?c$BnBR4;Z'&>\cO"aDDoc+nk@Y%;`Q7D`2!8onoZFFE_]feLqphAE=;RO8ASPQb_9'@D5FYkE:$QGW-bW%AU].>c'TYE<4W#YCTto?$<EZmD<*cT=-C::X)&aVFU9q8%W84^tPk@64Y=@Sn5#,bs>d>"riWiS9[Qg8m8"q9SRhh[CIMc]nfo"/]6)932.SD6qmri=R43Z:%J[@,E[aIr&>-;lQ3%-:r>\jYs%WTr5qmkAg\s.cI7P2Y=q3-Qel[B?$@A:JZ-n]Iii3)_?Zr+MGi/i&#Zl9XApZn"j=C#N;u'lD7,MU!D_4E+)dc?$>k/j18#O7OpG%8%Q.C.=!moGo1Vq>4<JZV!W@)/puNuG6)$9f5i^b??U)ShI'i+8etHOd3Y0RGoEK?'SXkL?T<0LQT93;fpRPbVR1+YY_,]T=%Ar-%STFbL\Ii'+Cra9Rc+n'9Bnj"'7UiKne%,<2.u!QrKo/O9<VDj'm$:[)LmN=l*Cdg7d&kPDM+9*p"4QNeEuVDD7F/$]ah<#%P=Ojq%;TPp$'(+'\\&+q<l6FpKa.a-j0(-#_)EE6#32OX[fVpSd(--t8rl.RdDsa6A3:Kt+m*\!A;[Z>XMi>&(l"IeVr"IuG./WMeiluPc%plbq<`=o1=Zu`I(C`K2Q_@gSohI>o<p_&idAmk(gG*!2igcQKp??"t-E1T(QV-,&qUp/8%r>`^TE1E\`.&q5X*rQ-\j]P=J^.FnH%<\iWn<+pFBPkF88fPT]:gNMDa%JQE&2&N+`H__b:Fe^K*>6`V/O)oU-[&lG#<-YJbZ0meTOm([!XsjCgDXn*N;]^lB+*(%LEAV%M%OliG&E<dT<7N1T8'Q7=4Jok#M^;f!BF:oADV&+Kk3,WXt9ilA+n%M?UiZUe:nq[[=:W?Y@LihS+hRuqtj)0"u&uTS=jAB)q`!^r!%X`^7P.FGl6aHrdA%h%3).=[T&HXGiACj"7Lj(S&*(WX.G*_+@PnWr:a:@L?Dc#bXS_!u'naKbR[D:[9,nh&g$/+tHfSW5SRH^,L-%NHX.!=)kid[,Y8LGOU/B;aQq6.lL9YD3K<\(Tm'fggRio?<a)WoleN3f,"$N=HrE?%W8IgZqmQ&Ue$8P/\#E"[*6As54G78X)YY.%kPE93EJisc1>>%3*FSK`McE)hIBP7."^qn:e2YTG;"hOsnnQU)KN8f;,\LS^1W;a&\n%^TSE88OP"pPX1QgCcDpsm%?1D$NnE98H%7mA\fDUol2ckQAP<V`lt8$XFAUL0I(2YWWdar#ubDGR]!NR$WEH/*Y9rIg;Z[c%5VQE5'R<eAB-dfeE_ET[pr@Y`ruqT,mM.Gf"=%5^J,SP"[lJ2YF&RWhM)Q^1^_$\j+nBmQ'VVh.SMq=Lk3(#7[#ErfWg:HCRHc#FRpi&(5haD+Imt;/T7=`?V`o(qZF;Sjh48BtcP2%p[3n0K<DDTr-X!A9@>1-Z1cT)b[h=H?',Gic#ZQ<A%MHN4n07)D^eY2+2&K*Ucii"6aiJF"]9prc"Ye:UMllmg%W=9rlB<C!0+-L%GN@@uMt:;Z98Jda"kl2dX2'P2Z,WK)8+m$WXNO6Z.R+ne]gc3EUQTfUDL'Sa4`Gmh?D@>"[?>m`O=eafRHd9[&;q>H+bp_S]0_Nt%X]S\@XhmM18\TgLWT`lJ*9ZBb^agYmep/PK*XCrV_Tgl6()<lNWE_E1,IOUd]22OVhNWgcb`jS_K`+_d9VIi+/BRH4k4'hAoAijt%:IZR9:J%&K8C7@\Z1"hi,<Nr@Ke7-j*cV!"7pu*a5-U#1bG2R6<Ega8,1c>12Ij3(d54G&'ZMPqe+pM6?$XEfSKUXc-;1?6nJIN(%XmHm:VdBm]f/\QrZe[C/E$2NK8,R^@[=QhJi8`pV_%S`oO+%$qQNMrI14S0Ld5m&'9cEB@7cFnW1L5Pq;tHre&U0qF3@o,[&4KB:%p:U0$Uo_Id/1l(&`qmad,jDYB/m-<j/]Msq=(FUG;QJn"0]<hCb7V#m'oA^KPkEA9=<"4k.UJ&N<:[`2_?E<(3RBI)Y!`K[.0WcD%U?.XtE[49$MjgDpSi(JWXipTc0Pl+_NXhQCpe^WH$8n+JY4\`[KA/GlPWY&X;l%K#ecr,;Z:04Jo^VD!#*?NX7l:"$A'Fm+94Z*o%"7E#0T;OYXc+2upGS362=ru<dTH%+oi[hE$A,#a&P8H*\>0.h@mPnl9p)G_W=KiO(k&++"i0V?ecEUat`rAmKIRB-_G^`%#l0?"8%aYJ?e8++a3l/;c[P)QO8#Zj1O?,mXf,J3W6m?0tt</U7(Z%KJXh.,?KE(\F.*S+\DrN7*AqbXR46DjH3nq2na*8u"RFmX\&R.Gt<%`qU`h!q7`ZF_VaKNopN=%Eb&^h5=13@#b/9p67<",)))+pLB*R\W>Q`0'1Y(1Qs4\AF3g^&Xd;ZmYN!p<'3,[G9&dq8Y(>j>2/f2%I75?hp@"qj+m%LN_h5kgB[pNnh@F18NU)G^Sstf5-u7DH`srG*&io#92e\sC+)PTHF(d^lMJ["]hA>up^K17m6@R*7_e?#kRk^;^%/6f($ZHPS?0pbG^-m.V`(VS&&B^g;UH'_TkHb.7l]l>#RYLnH^+4dm9)'0MF$(7BjrSY5Jo;l*X[<#(.ql;=uEh5e+-g1%-BoBPu%0`'9Z#@Lk*G29o7Zi+OIp9?aRU:gnXBr-QIDcE3J*A^ZZjj=jg1%Di\/0jP.gVlYM=<lS.EH>+D<E@?D0'5aM(V+5u:PAqq]8]ai%U$ftoK(Vp?@o*Rqq:o4^-eBnEGM0mVCUDp_\Q9DudIN'`HKa$ndqjiWo1*;.PL"$-S`]``osfL;Zk&GhQfCXA@@6o]aBr'iq6'&%%4IB5iT(a0"j-!p4Z48ZO)SH;P<'&;b&=liq52-oSRX8@OagdfrZZk[`7?.5t2:+05.0#jRO.>K@njik>;OK>:FnLQ9.X<7o?;di>%Cn$&3_fV@?1_a.JKb<W>.hM$q=<[;REj6`of4Yo;ojV(o0[1@R,JgAS'i#jkLN1."5'3jf@&+iX_;nKnZ7Kcsbs(=&1.0O^bbt;s%\Zp3aF,Vbuad>^2OmuT5[=L1ig?0p-o,gKF*9B[(:#:p,6fSjSah"*4kVU^5*)6%cI0XRPL"V@FI+r.!V)(O[*2Xo9KOnQ:D:^Na%`"aT9nMbg._dTf_agpJ<7]\`7T\W2X*=h]k6dg?;g2rjkTUgRHjgm?D1&FA<?sKn(HCZ^Rk';([%c)K(k"tqY:O^I3VJ#hH]O.^q%8Wadj/D7*V`nVs!WCVo8BMA"@q-GVIGP/I\-)4Y3j<ai<7&lr9%c%XA?b5XkZXg6c?Wp<WjSRig`R&iukD8ln2=)F0)qpke+-%#\%\S!O'310@*g1-XiJ"6+4>Z-]jKBr:lY;;780#]Z1JlT32qn?Us];/[-bH-9bN.CZPUk>DN!ooso?T4Y&0cj+riYbpRIMi73fpt_1%kS*nWeI/VLZ\QN-.!SqeF6jrPn2BIKlBti=D9;1=9PP%n[R]R*]'"t49U9L/A@ZfH4YL!&DEDHG%$k#h@Z,+WqP$e&XjlM.39LJm%=ilG_X8t__S.^b)1edJlO%X(LE<f?XF-g6s4R,+mCh)fU.-B[#T$('sGXW+^$n+SoWJM85+Y]MPhWJ/76+Rjn'+kmLcr)f]RR%XT%HP=[lFSh$%!7oFUhP13fPFiW3Q@e/V+Al`*o&SLhdsP<YG$KBrCRMB\Cr%\8cVGROg,,]gCF%;7$>JeoN*>qBrqBq>,_]+UaJKeg%W9iHdofAmb[q*T\m$FK[A)Z3@oG"MmC*JWPR*QgFNY\s=FF.h5!U.2E@4^!d,?`gIadbS+h.Wbr8#)pJe34raa#tn?C5&q*(CCI,%Ssf/5":*!8BkKXE]i%bJ_JRMD4#e-gpEQM3'*s4NcU0(P`\Uh]Re&eOO=Ae,CS#N%DqK9/Fb3Z8T>?<E$oCkPAQUo@VT=F89WL0W%]:)qabAgeRX]S>nc2I!4SMSqRg0/L_R+ulHWA]*qcfXFZPOC*P-Yg7KhkIZd[EMnko]SBPmGc7!TO#NVFCRQ2/7'-Z/;Aj#be(ML%=?Q83]Lo9i_addhEBmg5%^2Ma<e9"QFT'[Xlc\TAqQ.?l-_I$g4b'>=pjE,'YHG#"`>+EQn,8-9$t"I0q:n11l^R5'cT\r:qKhVD%q;^eEc=ao+_.<dGAtOJD&*ISL^R2_/+77DIc,D9<HWYa3IsUYO(L,Ykr!\AQDe955cYpRdrVHBedb=KkqXO1#o@`p]m$"LAR7cI>%N:Y`_Mm'mEIX>sd(>f(E3r8L@m[MnGjn[HegXR@*r_$16:MroLj6u@)q<VlRI]K'Bpql4'4*?:45Ij[q]?]ekp@S4Lip/A1e!mt-%gUiCDqL#dJ^$@<62g7?*\(kjel<cf3LSpK*(UibX^:?5XU!L'MphIR%+5YoLn`B"p/Ls%R,C"!Rs5rtEH3^nTp?>Z1QP[,,X[[S!%NbAROhpg%6QsguU>&&A*ot0h=lY"PjG^2G6^RL?q^?3[#pBVhAldlqSO%gI=rqtbnK"1-Ec`V36c8^AFf)*uLDR(.\mD's5VcTcT%1W!4+o'*^,g?44^a5:3o533,8rnhaO-PsN"O'.=f:&CcDn>VLus8D?5qirZWI=_i>m_6@s^YSeF5?qLorebW++53g!+PT-UeZ!!A%hsZ!_q8LfqQfn1nCA,bU[9lr4&947;MLM0oMKRa!1OKm7e)6CT<7M;:]!2bb^1_#FI;uhW?H_rZ\+\s&mDV:,kkDDCqfqgYIp^GA%)t]'7=RM*fHQNedZX<.F4ts:I^In\.]2&n7O)]s&f;Hs`rdOas(Tnn?=KJ,HpETJnk;s3chCrVPhNhopqn7p^l07<?a^5PSe$!p3%k0dg9SEC^g\@6k+e#-i*T,s6bF"a^`1aaX:<Y<)%7i$Fl)QbN<,a![j*]Vdj=orSTgddkf@$9pLjTkUpd0&62S3_ashL*N@TrM]H%I!0sbM2SObm$$UVc^s%=5!-G8?G?2)?#hgZSb*:7Z%l[iN<>C$Wq#HJR7Wk%Ml4lS:WF[(m":A#8!^Zs3PE"PAlABgm+^3WRu><f%qB+$`Y+Ck6L%<del-3]O<0u2qqRgZS1MeTuCM$pZ5!Rr0k`_M-o;`nThOHf28_h56DD#'f#&nM.aT1`\>6_=E@!tN3j(B2*.M<b2%FWG=mbDZ5`o^Ut<<I9%<qqH^NJSq)ch^t*S274dX0/:Dur;#/kTaRKtE>]3GV[bM6^-06B!ZQUXq:uMHBWG:fZU04"c"DKHQ''=h%2s7ZIg`X718B^9]cLlX5Fa`u<CEq%N;E7s=?J&pdn'5cUc?Z7Wca6t#o8h5B!ng?0og86ik`)RE?^m@N4aMKqGP]k/ji-&bALtQ[%X0XrL]mB8)UsSJWlXtM0e&JHAf**8BE];Ub426%Fk.]YXiU$-p)&<&1q&bQ-T&9sem55<1QPZNqDsqSHIsZXVMT^-rmqgQ)foK+E%;"B@^I/eD4O(MaiRY>^(^7Kp@R,?\hlD9WokNA1]F*_IYZW>Cj5!$::Vd=FmacgMH!C8NjZI8li5./p2YMRJ>+.rJrqXOAb!GM0*%nFZ:o5(;DOEc^d$o=KsH8bYGk'5sTC8ZB%7/hS7'S1i"Dr$d*NIJYSen@uZJrUP012n-PlE:($rmnSdo,Q)^P\Z<Tc5*FZSGCQ==%1!B'6#K0l9I"K;N+#CIg>9_;CS_$pZP`GDHF#2f08L>='s88ajhpV)1+XZKVR+Q-P(D&",&H9ADqNo.a+9$.j<_(OZRA)FL1Yr00%j%?U!NXe:d4b]Vc?#M:&.lmUeI).m`IkjCe++[('^]+1-=<%:]CiF`HEV>_OMsDu(+Zgs=-MmUta*6G-ZFjN5a-FEYhq0cVYHI=f%2P6LhIA\TWGF@-!SKE-?]<'aGk8-q.fgR0PP!AB1hX?5An"frePFVI=Vpb=iIU-%F^A3/gbBue2njaL@T3jgt3BQCerBImQ2tcfQ%&)ldKh<AFUKAL\ikmb]'^ZN&T0'"i</;V^;g%EVMo>dnOP1^)T]"VDDGdh'b1Rim$/\j7R$aK%A,"RJ162GCr"GoQ3nS$;4RmKUQ%V1-*9B#GmN]R?Hdo\%&;=L8X<;sD'23IQ:+GhVE4@uoCs`Te4jfW'%F+j=k(M*\a2!PX7RIBjQ-gGQM:kgRk%7CW]nL2iKl(ZgRo%f&L"HG"0'#^FIf7l]oibA)A9k9XCec0bc[\\FMdVmV;1*1?1uT0FI4Yro*^SrF`$(c>QI]Sr@)j%ViQ,c+.tGH]Ak[[[0+g^-pV!%EK84rDL[$'lmp!NDi70Ui%ep=\(=tqO**@;>M^_=Zl.DQ]7B4EMijR:SHY`m);so<jo/b<cO&!iB=trYPkJR]N8%8&g#JtW%PP#/%*l>8(pU)G_^D'q^1=)QJGd6XI]MfP[;k*#t\_P-O*b)ITeC:S#2jV%jf@]FsRVeNemY?,rhd--Y!PWiU)R^Hr)$_lQBn*Xj\4g`U%IIjt"Qr*cs\m)MpjOk0?2A_hABhMCV?[mKNIW)K0QAVfG1J;^@E]YX55/4dUE])Ongf0Brs-6f!pD1F@qVq&eBu=th[pNFr4["5%%]r9*//BQJfnnqm\<`*p`ZOccb?K1>Jb,!u:p'S9&(aY*]rX.Q\[&*-6j8J9_BUO4oNIkN,gAL+0jr^,r2O'qZR'sDW>hJA+rN5_V%AN[%s<uXfgSt02ZkI0e1pUfg6]KLUbH1pW;!N@he=1?rJgreDX>aDM<c1A8A\ibCa59@JmQE`Z$o(9EgB'athH+lukUXUm$,drgc%91`fX/@21OOn[\N?/_paB"dh+;%rOTP88l$qI/)Om[_MRc1Mi1AJ*Q4(T,aO.>FDJgUir%\3QT/6/\fmS(fNq2U9*ki^CcP;#"o`%V>JElg`sNL92?9r\$>_We!o7O/rk75_I_4YPb!bZLXOXKYN*^-YO;*+?Z$[O.eE#hlg(TgOqYfPT7<,O4053->JnYQc7cZRaK=\2%=H$IB>b+)6>5R-A0j>gRg88:r\'lVFR<H3rhUZ7tekYhder**MGPfXaRG-h.Y_5@+G=Xj+ZE][K=khY>WICD`pqsH:Kk(>sD-a-1%AS"N4BjJh.b9]*3F+$+3<ii("Z()Fb[[/fc\[BWHB4kF:&I[B3=\'<Qr-W/WGcC+S,NS"Wc0bHjKVcD3IW`)1j]0<+o"=hb8&_4#%='%E\BhPG)+0ej*5FpG'mlbu7b2IaAdH@-hX)F$Wj4WrMJ,S'5kr3m%:X/g,fSIfK*oM!C>]%shBLbW^B2?:uAp]L@YOB3IcJG9g%3mYbm:?aE5*RQUjF#!>!7l-GAA+0j<pZflPA)_^)pq;>TgY/,4d$([,hRgFL@ao^E[Dt8mh4!/hhgBNVT!9*]fIM=oUqqPCL\Bh9%2+'"^(VeijTlm=.RoHl'Teilg(fE;>3W^Zpk**LQIeAWP^Y;Zm*T)l\KfW>p+f9"%T8U\6!,XkMZs/&"gMONJ^T18Vm?[LW=?W-<%;d/WVJo^(/coNQHid4pGI#i'EidNZl27q2=U"QX7A=nSS]'78_LSil<pr^b]3SS=Y^Ya0t6MT!]%UU-DRi)7;YHtnD$Ve+f[Pn*>%%_c\d`E1<Mc3iWK09<&^b*Yg`X"uil]A8C)NMS@^E&ukXCTZp2[4_>b^[GWEKP*iVqoOL3@.Wb_bKu\D9nQ&*2`<HY`ZZ$uBWYIe%UfhC[<1%s4a5.0aCp+8H^rilS9<48oPb6^F9'#K`G&fRu$at<2M7"5drArXDT'h<4h/?a@5o?hk0[pW4melHoM?61MfqHG3<'U*T%ILJ,cgd_QVEqOlgFnJi``VgQZ-l]:T51sVE9tP6lZl?*AfZt'%6>C>r_*75'Id415i.G,L``'KV%lUtMb6#K[m:C%M#\ucFOP@9`%gskDoP:7(Tm.4uUZ"2^AdCHYKmA<-b<ZI',BIq+'K>=QOnuJWf".b1Ce0[ouPAd4).dm$5patO(XMO0gSaCj=?7J]*;(G(.T3jaQ%R9B1k-^:o_U0.?<?G`$1J+9/t'e//4?KZio?TtBR1HIjdTCDSU>'ft?boQ@pb%hYu7WpIr[V<6abtS/Nnu>i`f3($gq=9US1lo4)%[5'\jgTUbPmOJ;8(o+"5N&1bTVAd&E.X#%,$E!,5lRd,=$KhK4$bX0iqs3IkqT5K]cog77d`SrR(;>7(LHW7CUfAbg3IdNQ(Z@"1%H+[F\kum%&b\)nP*3m&\+O'%s'i>7rHS&Z>'jjlZ^0B079qdC-]q/>RpuM^$nJ)2e17>7);Wi)hdp:J)TBWAh]p%t+&rkk(K0_8R%bEn(KYC<qb%I<_;@NAf3,K>*Q`p\,WPB3!B]uig&fd+?2cshGme!X,p2E0d9afMlB\G+k-r7CPdp[*2'iCCq\*V.t*+.7'EmIf$*%LPMLLr:.Q#oTPILNui`Kd9lq=b>1A"jQJOX^]*G\?[^R^Y%lhnpsH;-msfb6C!6#)mFD(fqJSS\]K)PAec$4%^9o-^p"nR@a243T%^P<fo#31iC)eORaZULmR`i\;\pQWTD?J>Dre\Z1f=j8?2hr-ct,5!:Z<:>8*dJre.kND$kkND$kkND$kkND$kkN=5ir6rFYli6SV%IfForhr"ASs6#^J<l"]=i?*EVn*52gB1'iT"q:(n:Od]\ie;f\htiDc0@s\H<W:$+g5A1^Bn@gf'7H$Nm*pt$s63<PXo/euI[<j(%*1MuNpe#5Qo"<m:D?$^pqi7;Sgi!QPGXs^riHWG2p8GTWO+,g/lOWc_raf:c6cd%<.j;jXp"tfp>5n.I"BV>tf,Nch7:n<&nlVB9%)/I!/UfpFY'O4e/T,b"?r42=K3&]1hf]8;#X;,>_7QJXJIIUs4:k9!UCPMH?`S9SM2g_p;d*@Q1<o7l(AhK!`1+dGE79#r%J+H`7%PUVbo?ff8Hk>-U(M$S9e\(`oh-H%-4>$f[-qA2N<'#`Q#2h-OBpffCX5'UHg*#i^oi-Z1]9cjttO"%'L(J?8)$ZKhjBuQEr=[h;C%r%E5X=9%kV47iI9:Z=#AGjo,-EP&0AN::Cb8dN+Q2#IG>*5JS->UJnjR[.Pr'ts#F-F>7+$c8fA.@P/A^nu`%<M@q%]<p3>C,Sdb%;pYfd1.9Lk4t20BPQfX3B^3-af1(">i:T1)-qWIcAJBkKZjj&_bEMu"s8BE<?,JO*&1Lh3?5M!Nd"'j`PIG+V1:5QV]0OjiMU\!h%'t%^]Ou%Vb%[V;S2Dj,:=p/qnUI5`!8LQ/6D$uZ,Ek[d&5Z;Gbh%,FB-!<(PZc,h*2V2>;H)d6Z7IQJ<KYSn`l2Ok%K%j:fW9J)'%Q8D-p:;U"6lQ61"94JnYTBffi(R_T`&e8_D.<EWaO<6TPrYNII?^J;>@9=q$Ju1c!Q!0iEU('+@+-I3.[^Fs)f.T7S]Sjq(MQA+j%6#W)D,>hJEg+'\2E#3<Co3K[sN7Ek6"@_4hO'H/anlrJrMVk4BM-MogdTnSab=KcRMBc.Vo>_:8j#Xh)Ts";HR!7Aka?^_E0uc-)%/T8nleEeMV/I>sW`@;@a4=M_Jl1G"cDW5H2CPo/mN&c>F4!V_M?&O]M^=@!]X6hlA-jF%]==0cC;G3,9h#Fl!)dD6!4>3C-paHEh%oN<C2V8ii@B%H+-a.Z"UEEA&?Po#.\VJa?c2_C`eO"4nsK"\S9W8F=R8(:KbgM/osYU,C:,YqbBOWUrfB3G--GObY)d?NZJYI2=?%`taQ86F7:sG%U8r=4*jQpoGj\G'QW*@u[=\Btg`YYXYfJ$>nJ'6C2!m'T(#!BODK6XfAV"&@Xd@$!O4,Cl==0Z6<e*>P85"AjuF]%qQ-f4D9=?*0.(9^2U!Y.<gD9?Emi^ABtDkDSNbfU-(6:C(BmRaU?45=5@73FDlPZ08lOPC##J.'WfO$%Rf]M_H.?mMN1&!Om<Y!o%**Y/@VhWd&GPnHCfHS[7^i8S4'L-Ie'ePQs+".!Z-MU_ignr=Ol:$_.9V'!GNh4r8Y=_Po%#cs56IH7HqTW!HC.3&]pYOs[EjBAl%WI%s_HSP$rVKH6;g$M=WAN;TU[>+>-(\Z`'jR(r>BiIDu#q8Y7h<<IHK6FSlf%NZaT!B>7f5-XH;*HiOrQq7B(HFmf&2S^UB[:9Q%lot/F0HTfaLj8;n.T2[Y'J5hkiOtCbhQc,l2(4dJifc"n#<q$RLgGle_5eS+lssP=!kU#sdONMC3YZKk;R,7\/BhCH?eNV)I<HE6%71X9mD_.B<Dd0"(p_74G(J1n?H`e.:'V$i5jX1"La`N3Srpr@hl3-"eo-23ZG?"5/?n$$c9cG`Dp6)2QP"Vso>1^ZOhB+V%9o=0c%VHYk6`MU@VfpC<$Q]0-;].FWC>%dQLgk21\CT%2A.8G>aE;k;45G<==$WWE)ZC0MUjGuO66s=ofL6>TfhfdDSqN9*!EI\YtkMeq5%qY7,MUE;q4D0hL98t!O/p9nIFVk12s>jMBm._D;Y]BNIeIb@n1)W@/qWK?<V]<0'):P[cu/=AP1UNmSIS(,^N=OOXs()pZ?s%`hf%06[\G9T-%Ok`oBi1pU8%Qa^lV^#Z:ZSkO:!QaF`,GpT5$]00<$oTKpD03>RZ<hj?Q#AXtqf0-2&gD7^(VhV%EE7:[sPKEHs#5l/:%qJ"C+:8rtP%*M*6ABV:n^Knh/:Y&XbZPtL0/\/5hHES5[5;h]=946iB(:j'@=PAG,T=Bp9d1TPcCa57U=]s6?anja\0)[WoV-PX'%9uY[1C_S4bDYa)TdCo6!lb8Y6QacYS(hS.!gRHdepQL!tZDk4ra1^,eU\,;pj0kUiRiaSg[@I.TZ.i>i!in&PT;H:*Rf7Lkc#km6%l^mlLB#`@dEKU1Re_D(FpCfPG\mbjl"=HECqU'L[8Pk>)9Y"Y))nq\M.;t&Cr^:VHI*?P\Ar*'n3ibL"D5n>go)$OKO"kYQjlju@%"lcu4W#mmG;@X0f"dc+.("8p[gGR8+6,&`I^eYQV4Yj6pU*#_l?KBQuCMD]q:'`;9\TauFBN4YfXYaV),262.;)Xi2]**;+Le$dC%.V?HALM.IUA/FQX$/mlZU&6O8'^p:8,d>Ca/'@;9ml,NTnB0O?R:;&7TC1k*XYQFQBpsCPVo\A(KTe!8[sWArLOT6e?XDgBB1m^,%GDd>e;g)C%%9`G,A\+3gZYL_5Q0$s]^M=5CQ/.=A`-9Fq>b?)#'1@aLRBkRB_co]j.]6dje$7R4GF(0jRkD;g;3L!Y"V'3-SK"$Y%024YFB#[8H4I`e>+thpIci6,hPU.Qs$^8$fQ/OCQ9aig*%B`]J0/Hs/O.;Pnmqr+YL!ZBgnjf`iE0]n[c**MGcYrP,!VsTJ9601l%EnL3L!orVgXn=(1EDKdk]A_jVp<okfXjU3SX_#0^D`<A8[Ve9QTXW+\Zn0>6cR6T,''WE6(X#F%`k5J-9KdilO6=0C*3@d<UK7,=%Qd5cJqD6sV.7(*)f,a5S/g"[Va#BkoG`Ak-og27"d4.hLT,3]]i?HBfEUfp9g.>Bu3MF%7@;-*5+0o!`XdG6FiTW\t\=:&*XHM%s%@(ojYo-#2G?"1Jr$*?YPb8''dM4]!`/0cSK\A$/L-C.J6N`Sp#"m?l0&nQKrFD&R.T0qT/h9t7_h4cSXaHsm7,]1%6C-%8YLha>F%\^7)kBNcuge3QCJl3_;(-(qX'P,qlM?(Z6\icH?p`.o/Ta">EuHiJ"Nf9ZH:=S1s(93:lW&KqlTZkVhNF8KgBn$;S7R9cV&O"Vjc%$;-h02.:qAMKZqg;FR-E=<drTNjmFc"%7qp1Kn:S^Xc?%nga?$Bq)Q6b1L#oc@,.J:903)K$P(F=ekU:j'8>YAaTLu;UAK`#L_l3%eN8B6<@gNqA\_#Rfn?3P(M*p.DqYb>E3Fh!kE5kPel6mXkPLNs_r'Wm+uG$oLLp"$0f^7!>j3Bc>-tB=VO%"!HM>D48B'l8$_isH%eN\_RZl4<o6@q_Wf<&a9<YiA62Q<f)rP!5a0je"id2$$X4-kNRj_fsbriE_tWWZslMsW!(F'd4;P8dn99HJOrA6(OprC8'FcFN!;%hf$6lA7=&RdUfB#aNR]$&*Ii6(O&;5&X,WcDB-Zgs7p#'0#JR%@JR-NE?<='/T$@lVom2NEA9,I3)a_r(L*I?(S-P/LfS9M0l:]"%)<mXZbk]l4/\B1@(E^]V1s2.6C+T:#mU,N.Y!LR\`VkDWF,&uSlOGg*R92-6XJ^,h<HaaUi\,Q/6/m2AZ(g:8_;fTDnNC6Bpri0f%268Oj\`drW65R95IWFPnC=H_+5P7dC:"k(GA@Ijd^71^&Ihf7<]X_S<9S9TCnVZee?)mKKT;DM#V2qJ]qQH+;1LB/&5=O)^;3o_[%,@>f7\HTmOro9I*B,1tAS3#EhaZCs/YIi).8TL,q`J_hY-CS!Jf7GQPVlUA7Ag7'>q+@K;c;l-fj"^q/n+a32F\`SWgBPQVg_e<u%AM7B&R,UDki,()/Z>I<sEggpT5U;O!cfc2Ce=JG(/J91Qji.7'1.8n#iDpuC'UB*Se9Kra2.f>OQ/8buHf_0\G.S&^fi+2^1[Yaf%bZe72-sAa:JeKlsP&N&"e7&8(nCRV7`mscjZ3X%`(Gnu!-B'3YZS':I="OC?ejc&,;P$#Mf2T[ml!`jCs&dr*DtfZGD/6Q<Y"oPu%^P/P6b0NKLY52p,p.t5IVWGQCpEoi-8=hbeQMfMa4=oI<%>Gth3eF!^,OCCVk'mGaq>'iYl?VmjoCMSFoBOX4b"+%B^YNd">>*6&%Ibm]obDe1Jrhf($r9OG3p-tUSWB*AcQ=%7bFk$W;m62rnH_!@klE8Vf,G+V5*M8f^=KM:<g4&HV9<hH-pDH)<0UY?)]tb;>'`8<e%(ft[X[`iiW?:q>jq^@GiQ<+;nfK-c!1Z#Bh$&+TY?X'rI?U$Ws,1$8MC'TY6RT=]1OE>sgC3sqpf.Y"nd`[sbr4Te%Z@318-O[Pj%b'ChG5^))!>]T20#f"Ut=nm?i>"ka;dTUI%IqbA;jhOb!,DY[5__S5=S?rks'=sdZHA=,MKAYGdIm;Qls3p[39J)3G_\>_\4(;kY%NH#Ho-h24kc!IZ1$!K8^@MD;8f_!h8pgRMF04->n`-oNDf6.4er)nZM.7(W%JtmJ@?)U\dbDM<eW,\FXg=46?i,[dJmELhshu:!@%M&ojf@JcG#[JsX?`Z*V!jmq0V?FG"G@(LgQgO/#keer((H[,2n<`R&S]9N]97L.\[GT0S+Y\K9$oWZ8UYM?sOm[:6SK?6`f,&,(-%>k5(f`65ED2jqOYd:EVG$GEhf]NPi(/["R$[?8C.*__B)lsXV"Dq)[(FDU7$c/u6'%r]n41++`ipu-O$.e:SB/.[/c&`77>f!F-p%;X%2.=<g[ma>oJS(C0IHYgP%?(*qfKfRp[-`]^DMF,rK[l925QnjJeV>kUQmYD8IfEbVl^h\8e[,$;)H`ZEtJ9r6gF%OQp\QMU95%RACs20!+mP6#.k=C)sDC@EI/Hbq<%CR!uEp_s?$(%lR/@_."t[2:8d1I@Z2:$aBn/47oe:jE9hfE`2+dnMHQkhrQ;GPBa=bhqbPi%ouf$t\kO][]o,IEQS2]0=OY)1-Z&'W;]jJLf<<$o:"t"sgVr0M)`u][MZj/e_WS:Yj`Ont@;?[URhaT:p"K4:$a".$hIg8I)gYUi%[9)e3=^h7Y9_#J<KO:k[/MibF:8tO?-]<[;pFp09$#%p#*_[rr^4XO*'N)V4(Xq*mB/"N!@%j`0hDbG#Ab'%eaIfWdhpt)-G,2$Q%cU&]a[eDMYOob<b5Ns=Ea7PR\d4_25LD`biZ&/ic95/UD`pPWbR)Xd#]"M?5\4(t^CBp&;9P:_9IG4+iFYG7JaR<\0o@WbW_n.J9%b310o?<4DjA?n[-'PuQ:hUG,B]dRo-0(ett_&C5Ne[nqR`jD5#ZEMs%3]rBDD]lDmqj:&f14]Z<;W9R'h`SP_5(A4Y\$kkum52T)%fZTC0?bY(aQTKKiNA(%5.f94#Ii^e$FS5Fmo^6hiMndql3<,rUdb]IsH@'jbZhLN6LL5Ka^UZG;34lf4^,it'G4qV\hQ-?#5/3J5%nG1nb`RU1*HNsfIZa8gj5J+Wk7F>Jdrk0'EV>]bO*0b&2:;8s,H2i<+5<+.5ECIrT4k%0grme>eeu)["[eNeG=o_@4g3`;^qX!5>%mb?FFl-o62bYG=lO6qQQ5!Jee7n9lrB=YmGWpn3bHh3<`l:\0eT23I.c0"`k`U@XXo4Rd^Zb:+gO):/:=gd-Dp/2"!J,<NB\dIr#%+(D0]?_D05pks(Xc/765J$9!&ho=<pIQrasO(Wt:pXSUb3r*SFL1WXYI6WWigi%q@SirX[\mR1k1^c\+O$a8\[]Z`3e'CA0mY;M2%&TY>3FPVDEXHs!(l<unXbqQR_6?7QV0>g+mpZjXmZdMa8qY_`M_q8=ISF)S='j)?!Bk_^=B7%+Bg>D@Q#(Y"M[u^FRcm>0,8F:k@%]"qc_5P:_>`RalV9f!0NhJZmp#-k&+cru?9^E-is/HXMT<\IW\K)oU.%Jt;7$pObK:S#b'gMa,N)'g-62OM!35'23?:flBZ>>Lk_%hsXX_7T\?+3qO&c(0CoE&$W&E(f]/VXeLqjZer_9D;[VJe`iXl?0seaJ,epsBFL^0aW<DHUgk+%16&,4f6oTq7fbD)l:R<Nb[/eY%IG"$X)q4/3;d6k_^[?[CU"cc^VDTn_FkZ;QVC'tqf([DFlo-hJK@Er70fj!:rMm-1$T?DHXtVuR@PFS_Rma99ScS(BB="l9#aLN5%+Dok:Isl/UV9\D7[SVY1J@nj[dCRT#9>.f6%to%Q2m?V*N"ZMT4g8T%+)1n"p,<gDD/tB$JUk>7,)N_bDi&gn22s0r+L1/7+Vgr7%OY7j!:r[hT@:SVS6/(lW+sd[<G1`u&,OG]6:5Lr%F^;!blPeoe:_gf4X^M2c0oU=AaebjQp:II3^5Xaq*33-YH?ul70IF'H(ffo5%<=<%MBb!;kfbt)hV/L0d2?MAaKOG.WnRTH%^c)]>TX0pO!&38G6/on[6`c,9K=-,7'@qa$!U5PF!N:Qn!+O3=D/i8kYZf!9p4P`Q%<m?(,X]*ffN%g6WDf*LbcRW[#])?07B9CnOk5]?:1p9ldJIn$+dH>)b=`\&s@&.4@Yo+JVYl&@i$:DpA&Kb<D`+jo44JU"NeLK)d%%Z/5D81e$Q%45l?*=&4*2;6')4OA7/7V1SR:0=@LBUP5E_?$'[@F3*#hDQ;]fjoiU9N)mn@`q)\>DXgG=mg+plb.fBS%[_G;=$O(%lXoVa@eRcjb.R^Sf\?[^cEU87?e8i[/osOlDmD-;A.<2^CBMS\5A`"#8So\u[^'``\IQ;EX4`=JW^9K`$I2Ol*s*=Y)QK6f&;KC[%lHWP[<[hdS#M&u)<),\D2Ya1eZ$rR$L:/<Y(n]>9aj(#a'*iPaCTD(Z@nr[#OO/VbgJiF8?ql0qC'R[,9rHQX'Z,*i31j.fg.j5/%Qr"7s0`pVBb1K6'697i;W>jlA;[I+b<KRD`K-uXN#j^,$`*?#%h[T_+b.DTh9%@`q)NrKR9EV+Y5P/X1l6i>G5Um_L6#>8J#10E-%\hmO&BHkX\"K?IH&J,ST`p<;Z4OF<Bl4Fd;CRZKG?34J&Llbe^hRC2`[<:#HJ$r0FD1Sn/%5#0o$Lkcd&3L/Q&Bg4mYo>B;j0T((%%EUE!Ra#`+co!_UVK7F2b.5o1+6XdpVt_C+5gR5`XnMp6.BI`"!Ri@rUhZQG!%JEjC1rROfS7JTC8lp01'e<n/HIF,OB5H2$j*">%LVuLOWnIbsBO+"D&QME))iH#H"si9Vefr#?9pE]'klN#6<CoOO?"ursp#'<7/;mJcHDp8]eds=I@PYL?[O@=K@Z"WVZo;ak19Hkp%CnUhqYkH13J5FBu%*#K&R$_\Lp'-.84eq;"18>WB!+Ic&KEhfPHdT<3:IA.QH6Q.;R>E'"@#Cg-,k_qC;!2g06rjos$PYNh$>i/X%JrrYceC%0^9d2h<'D,E4ldMkVPtB]I2<+&P6u5"J,$S*IQ0]W&T9<$^Ti/pJ*I8?U('tV.Q4-<^Ws&f0h`67Ag<n<t[#V7pQ$SPr%&R3.B#qZbDRC[Cc?s9`WqM,'i=T]\Di=_u?Bpt-?0Hmr>i6*q%WfFJ&P*:E0WnSf81QVSZT-<W):KD5TAQO(f[()Z[IOQn/o-eiX%VKH,S$5qAM*([\C'FcpY@UW9[&(;u4RaEI(io(da?Z&q`7rM8D-'2*\aSM,I.gsI08SGmpAl]kjCijO82C_BA=M'Yn;50hjQV@jE%(M2$`j5t+mP)L&1(r14$qSC,1&0&+PWX@0*=FZGoe@GZ963fLs''X)`7T^"7lf-.tQ^VefC.LlB64s^p(>`Q&B<0KCb9UqJ-lis0%XbF'gM4;*\P8'RpVHRiD7PYteK6:T8!p6P_[4Y'9R(/?71o4\AVgLBO&8:,/Gb2^;/Z,V$2Sh.`@CRU\FHHEoY)08KAi4g_Z*/If%]+-r[M4:U>HDuKC%n<<C8-)@s#9Y#cccYnJ0pg`44Z+qO5Sl>AXu;Wjcl1gIE?mF.?G*3##tX-o"`(K=N\u9@Q#<o::`iOj2cIAE%?o(nY8Ln=@5ZGu2CXO=GD4^grK^4IpUl$lt?c+XZXDUHF;]-RNl'E(fl%^CG-7<I$YcsYuWrp^b&2SD5:+ejb_1OTH-_[!&:&,Q<%\[I0F$Iil'H_F=P#R-<Yg]L+)2;VU\K8@6YKB?se9"if`KCoV.)/nLVp';(o%#X,;,WEf3N$`QFG+`JDBZ?IV!KZ#l/L6a6*Q=[;%CoQO##5U!m[mR"]L;>pV5'XUIeB`Z-#n0l-Z&u'plbgZX?qqgFFTV`[J[sBE9/=LQ9prA).8nE-\$7m].Oka-dfgXh9Q_,i"-a%f%'4NaoUs^teHpX,LS55RqL*2O5!)s=m(Ckn2N?J=X!UcC6;_cDqPL:IW1Z'CXH##F6cjAft\[oK$)/2#Ih#niHd&lDO#DQUfP[U:I%?"&G67/C+r5EfKBZ],3Srfjct[M0LoClJdV.7A-.V#e,<SgP]D&@@BT;+6=r,1[#RL)_>u\qVfiWe6P_>>-^O%+6Xg70-PB+WEp1%+:2f3!,YdtTG^_R*5(./eIZ;b(IUg@J*PdKj//26OeM2"3TCgVZ*cjk0Yk;WS=L6b$^RUGdU75>N^,`<>u>D@(`6L;OHcjm=f,p&%$/`okZ>$4CjuZ")YIX>'V-P@7WBtoJ&>^B.&&hj*iR5QA-#p;?Q4gS%&Jg!M2!8%>,=K$!\24b`N$i$ZWKU"4laJ58<sWRY^R.QU%fbe+eo=\j&Z$EE2lBm8P#dQaD!E)tr43.C&Ue_g<(pTA(6Tpg-J;J<>9,N<_"[KbiAF(2mZ;h:GKWXL7^<o7chmY/dF>*c(1Xo,1%K_BTL5-Unb<DX$u)h\2Xb3NmW$T_,W!\mS#nS<Xk%f@:"9]'9?7S+VdS"aqbZu(Om/(,S7-tumQhuI[B=9F8(h)XU93$NmgIDPOj%VD*OcLu\l:s("ndJb(`[*PbA`jCk!h<K":`6bs$-3nm8I9AmJ#])YI^j1uRa!*NpqG7a0B"qi*f0KKbSId4KXpk@,C;-+]>F*_up%D@e3[J`:J?%>oD'<"F7Z_g+u)>g37#LhK(jL%1&j1CAB+0&W7K4(+;\#&.cb!E1+i6:chBej6I2[@S;0$`6amJg2;m8.?)Kd!@IE%JGG>o;9qX47._.18KbM95Y4TSF=4$4O;M*E["%ODSt`"!crcK84'6kfCgUj2n1RHQ@%]qb>Lau*CmBj9'>bT"!-.Xo+:QioPXR`l%"*P#<]Spc1$E]bB'8B\[":44[,WEOA)]A43+c'e_=Hd(/aOS:NFNL0dC4"@H?4d9]VZ;cDqBeaBp5)Xg^kMtV*L8#EBnS]>b!uFM%rd@1r0W9rX@dWj42/>07)IE]I,@Xi2K0WWa,"UEI0>N=k0H9R?r%N@m0_29;73?9CO_j`TAW4@:>"dJdH8?AL;0Riu)U(thfdct'%$j7s0(_A="V#^f495I!d5^B"DK?]6\#O9^FFr:UI#=3aU5QS+J[N%PAPg(>8B,KdX`\t"@K8>DQ2kU8*RB'/JMgFf"`*+\l,*R.[%D(,_tGL9nmTGGI<i&f<;#>+[:jp!R?6%m"of^D(m`8k,<Q*$jAoI3'OB7P;m-\QqAj\uOWh80;sbVj-hOVT'4.cW6f-=Y/[P\8hF%^8_:WWq$]VG/HRF<\&7'/a?/"adDO1";)XB6\?B\"Qs/A!Q%^raEjq!*s4hMUP2M%H]B*+'Vm%JUUS$-mMuChlf))fR&X/b7K&_F%lj0@69hL5T+@\@S+m*2kK")$&W1mIii<)uRj_EW%Y^<%F@kU+@W<NmD<c31[\.)j=Wn0b&J$]Z8,4HJM)3lO$b+PCQ+ES.p)&hf4%*n.&.dPb7`;9>Q7cGc>+E"A7#%$a[(#e+,M;N(V<8Yt8FCbneoldS`4m=A\?h"P".]$YQmI<8';a?2:lgVi_LWLOMh[K3`^<-rB6%eg%S>O?#VPU\EQ\1P_'n]4)<roYF'TZlGhb#WC.DX<F'Z60Qr41.]m'-;eI0U0^/c"FI,I(W9Rg>*,W5#hiStYXRb"B^BSG;B1dQ%6Ag<rXIbDc8<fX([Z452\=TiSieN?4T84@&%B(bD1jn1'`gGZaF/PX:U`bqZ1N/*o1_%DID..Y*atafj)\@\E!2pHg#9\,mTJPYf%rHE47!&N'+W@AOZ(&cgC[8JB2WFLR`G'8G>JB4iBO8_MCod&f`f7PXZ.9VXJ!GJ0Ya]m;5CHu$anJXi2d?"_SK-3oB6.<<)q,Ya6%%\XC/UD'__Wt#F6(dR/66XSEHL&`uOFZGP`&^$p+,<?$P(hC6GcbjWUaH.*g>o&nU"H.9HoWR4o%Lg0Cm"HXj=X.`<BNEn/-)?O:%eSUY\J^;f3T,^msQ)t78a4SL!*#Xj,;0_Jk6pesLW(.O]M_Q?*N>bo1@PKI(&Sb%tZ#)TF!8Bb@/O1$&6@;h-#(U7%+l#%6h@qp@%$*-#k=JU`a=Ast,JIm*3i![L'&(dK?*Q:s>_dP*1F:IE,V[IArg*]U0YYg0LNsO>Er(qZPWJ_h-)^)Q11^7DC&0T]*%<h>.])^4A%1dKYYKFPZSLMDC#/=N^Y`5H7R$fX_HIj'?H<C"SM`NkQO0kAt!(b*$k#cePc&(j(=f^7lS%FT99K`I6.$C)5MXUWj%b7$(kqZ\jo%9_;=0pk%=t\s!?[NcKccS_tEfo%CCI]2T6/$UNhWI4A[FGV_d"eL4-]YmQ<L(31aE`Iaqr7^+Og1?=gZP%p8FLPpsII-i8K":<dI%BKHY;0LjbQ"?O?>8I:W--A=K7[@srt`XO%rgBbo5QaK#1*hc9W,Ge;=,_lea]`A2Sa-]3_OZ+s[2=c;b\(6!3F+>Z@gPVKHC#&T@%W:!lT)44Gm5/B\tdWB4pp(i!SK4K,\AU\7hK[l`D`In9OONf"p9dRqVWoT![(q),-Z7rlh!3[Vq"j-o*6)$;9]%M&e,oOY&#0HJt%>;)Y%^6X#DOMiC7O`Q/^NrbWcSm)^]hCO1<<eAiG+?P\e9;G*i!q@(Q&QtT:<$MOq&>2](m!QB_eRJ7i2BfN+i%gl0(1JJHHW#A>%VSL]h=GC\36"QF7j!1L%-m7o6>U<qlWD-Elh'8oX:2'ZiHXTLO*Me\NZ6ncuR0/PZM4-'7$`IX5;AAD"qD$]5KV96Zk5_36</"f9%FG1&8pV0HOI:?m/)l[J"&MYJ-C>Db`[%>iZZ;-O*K/ACk'2hK.(sIiW?l_@NK@l*5OG%!p+@ErQV"%&r+/p4?pOdeUH(lnce4E]Y%OKb6<<ftjHPkm`QpD5=j'3JIh0nO3qIL&I`UX2=h!,]@=#JVbHdj:'`=08pL1ks@T,.1UA,a/]+[FpG'#.NK23e[0=nml.oZ>t;.%k4aHq`"J#np8LP1DWta)Le/$Y6lMEs0Q'gO.Y4RGU]]$`0p\mT0N[h7OMX+DQD0FYO?-f-qC'HO8/03nKH:B-Op8He(d_n9e$M[*%0Y=>\Nq,Z$fMq.>D.SIUo\.efT25Oj"VpqIRXEoQ"+"1n,P_+jCXhN/Lme".,&dX[9n^AQel)_i34,iWHGg4G$%jqGMHZg=Ar'%e%^mqYWKABCW2/o9b#]!lB!@FMp6W&GtL4CsN7n>ccn,c._8-Z@#Tpei>knd$6jSg$C'],T4iunT/.r-!c%iL>3"KTG"1dL7J@;S\D%!obq<&L^RE$l#rm_a4C963\<8])b5\R6Z;V7AWJZ'/4a+,+."k#n<cE<YDN<`f:O`h7(HB*0?hf\6kl<2"EkWR1)6e=Fh64.E^q/%-.JlXr/_s3kWrNB>r?mFg+(0/kb&eg\B)\OOa9L/n:j]%T!Bp2hN1<4]"SSZ7Rs?o0[``sj[lb@\s43Ta<PNSF<s@$`3_D1QJfsu%#E@p><3V"Fg"hH5/7Ud_@Pc_!(_LlqGWYQW=rXMqG<72jW<WGJklJ$<Bd/F06>g?5:I?K81Q#1NW%1F>flEa+`pW)cFJ<dhog25F%,Vq4(*Zlp9Zt8GAH4QJk=FBV$ORL4D4s3Q66kKWj#edkUn6C&sU@6GRZ2t8,K'l%pM#,<#BH-3(Ti^@]PS5;<,XA5NRKc@)mNK,`%NH>M%CXht#V%g='MRc7rUJR-WU#)V_/FA7P_Zl87efHcad#RIrS2uXa;K/tE;-j@##K&JsU"jTDcF(1h"lb4:CY$Qr@VRU^e]Ond%[gW:W65Y,>nd!(9##Tsj&idGl0Gk1uV8g_JLsmZtp'ua)(-,uE7iLGe/i'Q';'HF?-VeIg;50^-Oc0;P1tC->>KirEKR)^1e86k-%P*+!7?j6?1.%JS<:q)IuTrB<nqO7@#,X;cgEnab/7e?[hR)N-Yr%ils=M0bW"GGpWd!1R/"p^94\-<9.!:c_/`g]P_2'#J'dFTWr%,a9X(kToDd<*EPr%OA`P@LD5OFUGafQ1F,OX@8T4B$!m6,]'0^&tlN];c%_#_3mPlL80A)VYj-5f6sLp\eHI$'>l4I.5h$>O6-nm%!VU3"P8N*_"gpi2)2G*6il%nj^4h`;DUZ3<9\os=<??@K*SY7JWY\PZ5<8pN5gbeL7(gq7/#Nni!2EkafbjN&WLm9aP^dS;ELru5%gg=#M!Qg1,<3-dnK;<o'$q^>.i*dH-)C>oA^_hln2Zsj%d7ljGS,q_(8\_MKG)t9Tl`hQ8d[@$:*RN7BZte%5)3mct%>7/"Tu!9a%5e*#5nM'DAlD=$MAa]UDMUFIi$uRf=[W[Rj6F3D267q9i:bm9u-qQ)CUNo:n+2h*'f*9@`R6@$#jQL/,A9V=@f'!Z],u_6<ofDIH%;76&gIh=Jl[K<7I:>ro%=l4l2OT2FeDSbpZTK!RQkYkN?d2SpiJok;*c<qWo($ute%r;58CZU4'D?U$;*)Ml_,49m&"I'A?dsLet%%kD'jrSUmFE3.,4#14Jro"@[]ZFQF0pYQKR=_Gr,5a]A-UNdW;&!KDKdBhM_2-FE@'.O6''a1Ze%u^M8G1&oU;Q;Ta<`B-cFph)*%!(NmfA'c*T(5=@_;+#)k:OD)kl1BaHA6k%T-69n;6l;SE8l2=%CEoJRm6!BD0f*Ff!AXZ0(o-OI"3n+_P4h^<89/'V7Y*WR$t^"o%Rd;aqL(RcXJJb]d`/qeo6"jOI]pAA1En1_<ntA9m[W2aI4_?FG6*@63#f[H\kI.haKaD4WeS84fFk]O$l?j'PHAM8!cN4:QOmN_>%D^oa0P:/)hVS0_E:(LF2qeflCg<h-*"`4T2h,?;2&e9>.1MTQ'1o.fiCbTqJ"]SKc=0TGDf7PKRnP#OGMOg`Db#/T-nWKuke2R5M%n19e(!tEpS3nDAd@4hUW&/^(?*ik&0%Xes`B9a$rlC:kBG-X0>S>"*-BW_ZC&8ZGQ,toitRl#%mG?n/rRJZOlM73En_W4XSUf1M%%YZ,m'6h8;QeL7aC)Y'4#ca[9)-lmOj0M<T<>R0L7(b/pb#&K7T0aiBZaP;X#$QZ_'HO<cCmo0),ilp7REiSq9B'[sakQsI"XCb-i%+&E="G),3IE1Yf$fZ@uo=E0.==IG6)-4pkj3-HlPVC_(6!Q*nm5p/4Vn_+0ZBbM@\!iuqcU[`l%'GfZu\.IspDk(DJ7Sn@=))1K8%@@Xl76F8O&MkQHX0P;Q5?LYVW"QKSuYot&oND;5tZO/PH#-!4>XnD&a'FLs_P^+=6]l>\f@_&JHC?uqgpb3QFXpHHdW%ubmc>S:f%iU:53QSJ*mN]/'f;^JS$W=bWoa]G/[YG)^5W6kRH)@CU;#@ZgaN!<46)J9A]*'OE-D^lVWJB6JuIUq/<oIVR+X`?"\G0H^bIES`i%X:)^B&3@,5OmB!a#rJLBj<C;,%ZT9>Y%I6OPXnk)-LW.M=,DoMAtiW!Bcf#00h<WQGHr*N4]lF%#JQkj36VIEKG*:aArBnM'(k,&%B`QP(.S-)'p1EeF(I1$M8J$5SC4pQkP*8%ca&]'('0Z)rAMSA-W0LJEX-0JL"jPtS1,t)FM(f'M_ue@CLUtob.BY[aN)2bjJhhSl%P<"jQ_qOc&dd9GC%$RA_n4d9\*>')&^(g`+EB#@i_*R@^)dqBe`Cq25C8h)a#a@"KM@c5:;"Pl1U_hX#EX!V9T;eMAMhKIk_MUqI%M4Ou361VfhDE[fc@TL=[&=hgG%bZ&omi$CLHT0=QEN9D$JHC5G<E](6qk,ncUMPM_Ju$AR$6FM&b[m`D?uQm[G37h9;a@:d#mo)d%4O2GLol/Y+!;Fh2/p-9U\jN=D4k6:#%>@4][VPdd/keq[3kujg7isLo:l@gQOtb$POOgcW2W)Si#d3[(+bFccOCbL7p)W8\oEq&H%FGI.;@@kMG#Q%\n[d`XZ<fo#MBHHO%JVQfX2rgPBH&*:4$;"*)%grR'XgJM2n9??(*B/(SJ:jna_8$ccHb/W8iW3Q@PigmIm-HY<%EH*L#a&J3lceOXM:.gJ&EJ]TWfZ=shND1f@SE8f4Nbj0=?8!m"f:Rn<32+C1Ndrr`#I\)#aD?hghV5k*a&>/eJ_`.(ogW2;#E,fB%fHop\F5I`*OE_Wh,.-lm'3e#JT[#jD4Pgo9.2ZqoC7IH^M>eFl;VYoXW*]++o@SsiSi8CCX[/Q@*'+Np8dK'O[7d\:>Y+0WTV,9d%2/4FuL(9Ij+3(ijqJ,NdW:PO!?,JA;c50AVdtfbnQh*aYX@,iX6NT[/8+a7dj@I[Y,a\`_)L6Rk8I/.<hN.ukN$3d0(!h8N@UQM(%aduOaYn>m+eo<eGc%e3LX_`DuU>mRQc^]$fF7Agu'>ejY)_a$)p<f9cK_QRif@H/I(us(2.3099g?2l1]cG&J$l;At(<Y^`*)I>N%;j]9*=Sn6)8B$)r6@_4ZrR+Nar:e+I3ZhY.*o.#m'rheOKZ"SI0\R_,qs"<c,b=D1$o732k3.p=5jim#TF,X0+/SS);?h_WScr@6%U[LNkkH':YpJ[70mF#$t9aXhqpBYHN8dBlXU**fPi3ki\_g41pjA-&]CW=%l5Mo1UoTTR"M^E!rli<u`g8-_jc^M=;^gfomWDe@H%$h0;oj?g5V#(#MPqRj4j0]]I7RF6&sE!(^_Q`H!^FCGbhd%7jR]JP8_3D#Y@QWW`r&ju$0a6ma#)bYV]&(TsXK7M<(p46'oFUCda%f'-trLd9%Z/)B_t*9r[N_mj36;]37&@1`D<M3>=gUhd"N%\@m[m$1,aXH'*W#o$Z1X:uVcW!B6E[pBmd4<[C"QXHI[/dFd.9ICf&%0;,JU]Zc.!;k7kS,HN2pZca\bKt<d>kH=nWN@lpCa__rDnuAqY:Fur]W+2%t[ip!T"#9\KgJ"Dc)F)<$]1gpJ1#8LTj]jt-V%I>D%AcXRgh>#BFm)nqt<XMHrpLS#ioRc7%&gj:o(#J$e/'NZ8Fq:a,^lg0M(YSs=g-l@kOt<&fgZ!iUcfki0[0noS<ml]G":u?9Nl8Oi%qBXOsD.16RNO&Nsci'f&*:Y3:"X%h(LZB<@4fP!DJF3S-s%ZIWNouoD(30,,.mru\fnn*lV$?-UR7<Kde&X`T(X]U"WYq04\I_I0%KE5HE-5$b$h6i-(F?C-%l#9JtU)tZg@QK/!YFuLU+HkTPNb/=?1k"[(e7aUBoJnns.nEDE2J?((l%=4MVn6i(QfqZC]Z6mL7"gE3%I1AgRh4+Rh[Y%Oa,Fua1O+ZLqROKmU#Mmr%igWs\3Z."=U/Gt,LaB&N?N&>e8"Y5MM74/C%temd;6+a]_Y>@Z($^0J#EctJ!&ZU6%JQ5ZD;1!+f0t.c:/iSgT/,9'2EgWMd6`PQPg3pbY&]Y$nnUq\iKVRtr-]agD.P<"_'>n53+u4J]p"$G!;S$+(D54s>TO)FtgD2D-%T-PC[(HnPRcmgIOolr=t+:<"j-!*X.h`kO'DV8e2U$8rC5^S+peSO#6B/3*KbsaI.\>gq6JSIqtT*8L>dI>:2#b*gKIM4&'VqE4S%UfP>XX='^&/a8M,Z,ZRp#qlu3\(5d;(%&RPiTArL^d(9,*d!I,g)Aa)VH&\S3[(%,2X7^t*f$$IL<I@Q=P":)XnXA%8s4jc&l+4P%&Hf9=b$splhFHtmi+eo_bEMf*"[V0&c"3V4@L&UQLjne9KHu,,BK\.\&.TgY?j"M\h)a#<\LI0>FFT<ITWK:+>H9jGR[hD`Fhk&V%Ou<GcD%Rm"iZ_!)+I`3X*,^DphP3Pl\%$U]Q[%^71Jb;1H-oO^S7%rb_,=8S7cEu9L)pOr0FT.Yk]_nL&(+6CIM/DT$!D'%61/dd%g*Yb:C=K;,R11@n:!KeK^iTVu2ni\KPS]qA[BcuO>lPIlasi1FlIt#/[0>R6Co^eeKfCm[6J*@i8F[+QLR6u(0G+uo;`Gs0d4u-H%;o0J_YN@uUW7>G>"[<(=13<b.Kf;q=7%eB01kS/<\KNA?9.i'8aXr-u]YbH:Ui9o+ObMAm1Q^W6/!%bkUKqM4A'Vbd;@pbX5]it3%l?L'Miu&1h3X>p$AhfE\gKmV)ScK>E:`&5%6UWJ08K]9C)3mfX6bm:^ZPKe,`>ApjCO13/emU2i2F-[21X@l"N_0%-$G[Pp;?@&Y%Kr6hr**k("O<`8s:X?8WVuS#&A=ur5b_\^VD67+f.mQ3Zfdf-RD.u?IehQV(6gH2!&+ZA.L)F/d.E9[Df1=6#<sSlSoc(D6%<ha"%]lJ$/e$O5/=]@jJ+l(G"2j[IPkSKdema/O2h?(Wj7+!-<,%tmH'Y=NQif(ICg<_A+TM_/hkgD8XF1drgT6Us=OblAMLht/jbg?,*%N)fH?_>s8"(Q+cEWl\oCP2B1oGZ\7lXa3R?\tntnc,2E[H:N=3gq@RDV2`b4#,ZG1'P-^6a^CDjVHP55(a=M[/48UT=sDrqBnmB]%Lj#=#f(M4JfgmFlP2uhQ*<=Hh%.5H`(ROC2<U]J^hQ)X/Ac`7`WDN"-PSSO>"ZKHOOF'O$IX-)T68p:fo=u43QiOVD?fIVrR;6<M%[QBNg^l?gbiX!dLPiSM/C1JL<@dK!8cA&KGk2Xj4Sr)kX"d=:f3b?n-%SrY5W_7dL0)]TRV*&GZlp5_^>u(a[A[EBf-DHcqC>@\!%2,<%nMeK0?rEt;P;*\=AZ3*YW[AAL.ij&?/"sPgZAakm2E,$VYITAL,6:M!O@<A20"t4EqO>AC"bbD-%-:aXHBJJr9.7GYd4+.BE%PQ4;ONH`D_C`XRH9c^5$HDT]OVGVie(mYY?J$l_B.bp`u1uW8$Ej:`Wachmd`j:4W<tdG>\gTTBb.D0\HpB;pb6\I*iGhIK)IZ_P%YmcnNY&)YEFHuS%Pp3[;km@bp;U$VB''Q8<96oM_-2gM[`N.I4oYtU?EB6T2(D;a(82!P+?FA,cM!#0iWl.n-hKdS\m#uS*_X0S#%Go_/PC?*ou+@YFl_-g:7c4Wo?M)[)J]/+QVLhSA)FA`X93^d<R'tG4NV3iS>#l!8&*=4hI67?Qp&g\3\MOdMJo0<F$F@H?#=rc%R%;4h2,OiZN!-EVf[04;_/r1%&jb`7JsFHn,1LY<tn'l#rdLGP/,d\gr8GD`(bdG!e@/L+N!<pR1T_Jo)KLfAS8e:,drLm7't-jOmr%J/mJBkuOBN"PIfgK'2$H8C8UWa!#^KqZ`#!>iRPB8s:"pD%h$q!9Agg7;P<APd)'hKKq=AC.jQtg2b,4$@,U["fH`@*9O-^4n^2,%P9I[%NC*+79WX@r@JBrAgLX6cEJ9$LAniKlAHEfh>G9u2Ic.a+gbMieao_s_@>ohrY)/7&JkT]?(dSt6btGht2W!,?4Wm?_Ol7F@%-!'+oM,%JLiA*+h%5L83)T_QGb.*b\#UJt-?*oS!.s1\Anle(=>"SZ0nKF+^F)jeSd:./$B;HW<\Gq-5p:/O-J=`35![I3[-.pG$%+5l5i%ls_0H&YcJ)#"s$&edNG^V!#=h2#3Ib[Qq\AJ3lTb5arU$k$[B5UQV"XTALX>KfN8LHC=(7YK,;k">@6GSUYQ_&GdeWs"q/%5T$DpJ:KKq8_]NaU.;ApjJDH3N#&5A9>c=ZOl2*O.=VU2PD7B9PD09LI:@C[0f(5AL3jSan5qDdBqeQPn%<=U!JiAo-9?J9R#V4l%a162Z;i$(Xj$$\XlJdI6Q"eY@jc`k[NLYZSC'nPlKVp1.f*KiL+M`P,``@`h>YiIK;W"0FMI#<)QF1@/BJ"fGMu&]I,,CmLlV'F>%Befc;[gi-M1i%&[%':o40uN\S"5HQSE&n??h&REq7n>E!?6VH-O]UPn8n$XQMZe[iq@ms_*em].6S4+q87W8g8W;B8qleah#3ULb%H0)T+=@9Y;9NH`nk;r56fd^@C:"!MK(mdQ4)G!oJTain9OEWjuJ@S=YD$fMjH\n0IJ1u)%>G?)]!SUtXM3-(R-U(gs_Wq6EVV&Kh%IQ\fOTJ7$^(9#hBR7CGJF!:>'f&U]e9Xqk>@9MTcif\M2f)mQQK0/kq7F'a("!KG(5]mo!!(J?9d>J7*<n&$4ms($"mQ.?n.3QF!%/""O9pm`3GdcGJN6s@omA+8f3ceRHW6l[c]mKous2@EF@I<@A"(pX,j5]&hQe=PUXq\OeY20VoEF"G;6'*rSe?M(faOLHZP"?r;M%=`5[>d0INgL<u`Un$N0]fh8Y^n/Dq,nDNF;pUpWggRq^iY:/K%K@osE8jI(!U7,HR&gF[!,/-*gAclY'%.&d3Z?3&l:6\1UY*VZh%]G7Fb=H>ODi$p]JZ15_GK]n4;4(D@meKB'3#ZJSAR`Fr*$s`P'n<U7a&F"PkMc+^qLOkgWe-)IhB`5e,-IQlcRI1Aa1Gm'q9<p2f%r"f+ldQ?6+#W%8JhBi^_"Qg!UF\.l+D$\D+0.Z<FEjX@G.u'Cu_,=t;FsIXR%`2ipr2qs@/(c'TUc3aq$4rbH`D)ATgn/e$E*8_!%,`THmETl1]18]uB5]>#jR>V<+/l9CmSW8a.JdG_'a-k!+EI5iBME>&GROT]UR[\YU6&gFtOBrUR9._m?P@Uq'91CP"I-1rXd=l;X%;N7j#jE5HEO%:bj0elJoN*d(33&W.:\2d_2go0:O$37_E6&)#E:Yo/6aRV^b39F1&?@@Xg!l@JeXgQFhE\@NK8fDMh65Yni6KW2;%E%eg]88!G]FS@Vj7K[Qk;6fZ0,QOW8@"Ets[<U.9m-NA9H=E<OQ$jW-4m@^G`c(#_L"1W@(:Vf4$CrN]K`8kHl5:oLc(tssDKtdL%;o59-^WR[AMlQr,LI?D;$m#Pt`]mrjh0+[FP^!Ct+R!(m^ENqM#k)_i*n=ZQPp^nSM$Una!=5&<!63.Ycpm1?Bcf)E!f67s"AD)c%<(jX"Md!Z;>mn7PTc8`/fRHS$NG]GOok:r.3rs_nZJ]s`2*>SX$3c]?\-@0G_Fop5%O[8U?2uUKV5.>d)>-.9+.:H5N%.@Oh=MYU%]OsQhIaGL:79!:X0mSU/2YI-5H:RfV6Pb2KH3#n2U*_QL.G0dWMn:Ge/f?-+.PbnKVrOrGJ<@hjZCC8bG(]-r9WudomPA!r/3ltL%bt-"##Jhc+=fl>869+fX-?qS]KVKpJnL=`7*Stsjf#=Vq':#ak9/>YqAsqa.I7U[Y$l<.(Ii3k\b9mEn]]9\]#]VJffo-MHQc];p%80]W>L7CGZKL$IR&Z-Ri\T"1(c3$RAHcG@VOGud=3I8+R+L:for4Z+\)]^'NC]"tGfIKMuOP&Ym;=AKuNk'2Ad>K\(W;ou:0P<K4%]gqo5hH)ZSbqWtf"*^>:;&SZq?6WRKZtP)4Rq'N*dMVPGbV?K9Z@dhYErgkF<$m9M&`9"0*FVjLo&6N"4?K't:$j2G20=-fi>#kC%BQXJ@?qf>7)1dObU<9d=<mEfM]UpYBH9a%^m"]Cho0DDo7Lng9ldZQd!J!'J1X.A2JmWL2FG6_CY4lm8^1-tm0Z=1q_ff2D<GtaC%2fjl`$19Q&h-Y$@"V80M'cjmVKn8%a6C9"=];q\?I4Oi<).<=K!%#sF..\kXqWqD2cCdm,^m%G1I!6)4H-sS:$ZSk6XqYm6*SZP^%JkgM[!B,$`"E*5(6RCZ7]%)_>/lU$0*o_-=f&[nsE4a>2IaUgq-A?RkcZ&D/+?VKSCZKg[9X+tgB!#9ea^a2?\%GT^?E(i^)7kIn%^t:apCgL4&VF^07UQQlAZ31VU)C#*.+c;GE,nTOe-8/dLLDCTa<8^=P!?"e`2jf[MAVfRB/d7U.p:=0?#0H(4\BOH<-b9G?b9(?/%.!@U!@@?"l6r/Or"6-7N/[`$=h063E6mcOh)RoIKr!J+ugROQ"$r[^Io<d=K43Q#i"\,=.+,/CFN8,iO/@/(.8;57a>$9enY81mO%iYFlE+guB4Tm@Mja@W72K*b[0jdM<,!6A58^?oIf@L8GCL@=DY-m:<cQ^(Vc`R[a[Ia^]]6`-k2^B:re@5F"Pa'C?_6I:l,V;54,%kpjH$Yt_TH:Y:h[J^:"e[`AP"0S8h3)cYq'[$=SI.3T4b]i(.M;QdRrHpSRA$XVRW4$=1MR>H:#FcHeGQejXu-Cg`.+LDmFg,#kE%Q"PfSUe&Yl<pU?M8():'$]gB;KSFj^':\!=2JNjLJ2,I&$?P6UX+m[&*Z$N%KF>HL'N0[/@3`43etBhqU_!cZ0+(]pEePo-_P81]%cLe\Y1XZOKA@V,pB^%oL_DLHb\M2(k79o,5@aq5ri``0R6>pnSQjH,HLMIac*S?YHh\[g)2q-ErkaNEs.um<ils%R=7OGS9BC20s%*PYjr-"HL!,oYPLi/o43[1G*N,JQLZBqL\2+Ztp<<9#D'$%BdC%ZeD16>nhHa$V86^XB^t)rj[WO1aPhT"]%n8-aG,L5Cuo*S'(,%<?n=QnTI7/]AIt`X6VP_"7FuHNqjA,^IjPk6;[5Hg#tH@Z\aQ0Eb<ipU%>WKF(T2k/A5D"hcIDB5e:,b35C7kV9<XR=:YTGeM-Hu%`[+ll10T:%'kN7K6B\^VR(^:R59&ZX\";P;A7)oH&q)93s+E(SEDIBb1#dV^oOF$hD'PM0\0t53S-ZH%Xr+)=MY;]WIGFoZoH?L$%iE%UoROXa:K-K!Y)U3C?9Hlt(OP\d'l'4@K&p]77+$b(NJdKb[_b.K_KO<<nS)qI2!_d$>W1pOU`38.cFi+_49HdlrU$gIIY]ScO%f.4S0l%EC#&]Z:a!'95"Y:>L<]`pna#gkScTm>agOqQ/NoHSa"*'Mc:VMj!tq4KMi%T>WS5S(mso#>4YaY7i3;m;U&DfgG>ZNOUq%2t8"Z[oOC'4,s_ARZ%f7qW=eQY+Z69k[1=1_oX8G5f_@/a;/Ee&mi]<r@slh-\,Q9e`O33oOhimFKM'Y.MO4iiG4dA6Ni3C4?Cg=%3:f#i8/oP-[I.lY.t4$1+j=ld2jr45VUhTp\(WhT_GItQb*A!)"mPrs-mD>?C!_TJl.f74QL3cNq9/kL2?G#DHggn)@cS92NMr?r%JZ(O&7C>\Qf-gk_7%$$h&`DP@eOaP&2*+'si.g)ln$-Pt,63S>njSliM#g)(P1eBVL8f+j^m>eqQ>o1bV3fE8XsDYuh$+W=eO=r7%?L%p-JN@q:h`^2((S\Vc:Q*9WH.;5l3lBuNhKtt]cLZ0bYOh@_3-#3A4V<E_Nl,mp,ViZ6$\O*B&_>(=?*;]f1R`'$CB@;OEQ8at%/l-f&XUA2K\@mA"?Q6YHih/9a"T4c$f#r$t[He2kb[6+G;f&gi)#8#3IJn,E[X8;u)L"-X.):*ZfUJb2EQ)u<Pr$S$bLh-ZVrW\'%?;4]URFj12_Uf,fNA=o`]-D07;[MV,_6,=Vd`+EQDAoq!P7!&;"Ra?LFn@dUmH279dKo+N7tlVid)-$6a;L.oiRN=uQ*2K3Q$S/&%I."=[:PgR,<K'o*=aM!u8hC45cFRF)fB@`o+Xso9$4&SL'VOBHT9q9a,aDbp\10/Q;?6qV5)B(O'1G@<=`^,h5i]*)@e@TcGF*=J%2H*-B7^kP]U.cN]"GdMtf]L]QhX?_gLfVW<Ll1,_&>oC39Emrh+M81)&:XQ\+ZsZVPqoD;Zm!<.5[:_)Dkg^u.B&]tledc#EU1mM%*[?5qKlJJ)h8<IJ!9nTQ.I$gOT.a-%.8l>oeUE*;&cL968EG%1lV&'%ec'F)8V_Vdm^I*4RufYh9'7=A;CGD<pieXCkitO!71hHs%H'X4\6)PuN>_e[`b)2.mo)t)fr!I&f+G2<1@Rijtr"rT/j>=eq(b"Zl.lIBFXT_/jcc2=`Dd&r^g+'oB1]YpZ8./q!IA<8i<Crmj%^=MCV*[&9O'9B5?Hpj.&0/8:H=`:t<Z)QP;Q'1Qf%hdPANC\gBBBY:%g3Z%UTE3+:i5JYPVcs+8%c"P8*JMl*n.*2@HdDs=^CC_#%-CfUc.<[5N]mKd^<A:hd95qt`;="c96:P'rjL11.*rS,G,e_VJU5ic%*!?SI%SP*?-^&@_bnr.rrqa+^S.O9K\&;eHWQ/E60p/'7%1ZV/*WR3I6'S,1+U4%3+Fdr_m=\2EbrXYP[n-CX&N_kIC"'m*jYBfUj,bRG.nVBQ%.AN6t?t-IV9H#TV/`'%P2*!S9>U)q(koSVa%#gqhe#XEh!a+)U%T8dNL.0t`-<AF'5DMue;n3fc_nc4neO#%D**>%%;%O'+pPc=-[a)Q8s#F@8U=LEc/M,=7'R6SgBVu=r$HCXlZ%"dt$d3r$P,Y.FuO&\-\Tq/3R63Ug>j'd3&pED4Mr*9]93Jh\D]N]m+DER4k:"L5g9lJUKu!LNYdW6e7Bq_rj4^\hJgF*D_GG'@qS%FaEZHlpClgpHDQaM5pCgZO]77]=GFt14/KJ@"*:mr97kGGGckdMqPkSP/"Arj[N#Up)_LDC;5.<p%[V?g[gp/hqreUnC,i6kJ+_k%]sp2>fm@adqRc@Pl.$N;3e(b6bb!U[hqhYrSBl)f\c+`7<[AQ3q!cZYa*[hN>CG?!~>%AI9_PrivateDataEnd